{"job":{"components":{"64409":{"id":64409,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-656,"y":16,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[64426],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"64410":{"id":64410,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-528,"y":16,"width":32,"height":32,"inputConnectorIDs":[64426],"outputSuccessConnectorIDs":[64423],"outputFailureConnectorIDs":[64427],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"max split pnr bookingdatetime"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"#################################################\n# get the latest datetime of a pnr with a split\n#################################################\n\n\ncursor = context.cursor()\ncursor.execute(\"select max(bookingcreateddatetimeutc) from stage.pnrbookingparent\")\n\nresult = cursor.fetchone()[0]\n\ncontext.updateVariable(\"maxcreatedutc\", str(result))\n\ncontext.updateVariable(\"maxcreatedutc\", \"2017-11-01\")\n\nprint 'max createdutc: ' + str(result)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"64411":{"id":64411,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":192,"y":16,"width":32,"height":32,"inputConnectorIDs":[64421],"outputSuccessConnectorIDs":[64419],"outputFailureConnectorIDs":[64432],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Loop Passenger Booking records"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"######################################################################\n#\n#  create a looping process to retrieve the parent pnr of each record\n#\n#####################################################################\ncursor = context.cursor()\n\n### Counting number of records to use in loop condition\ncursor.execute(\"SELECT count(*) from stage.pnrbookingparent1\")\nrecordcount = cursor.fetchone()[0]\n##print(recordcount)\n\n### update job variable with number of count\ncontext.updateVariable(\"temp1_RecordCount\", recordcount)\n\n### the following variableis used to check how many number of loop it required.\n### This will be use to break in case of exception in loop condition\nloopcnt=0\n\nprint loopcnt\n\nprint(\"records to process: \" + str(temp1_RecordCount))\n\n## While loop start\n## While loop check for Grand Parent ID, if Any record locator Grand parent id is 0 then consider the parent booking id, \n## else on next loop convert the grand parent to parent booking Id and check value of Grand parent (parent of the new parent) id\n## Once there are no records with Grand Parent ID >0 the loop breaks.\n\nwhile temp1_RecordCount > 0:\n  #cursor.execute(\"insert into stage.pnrbookingparent select a.bookingid,a.createdutc,a.recordlocator,b.recordlocator parent_recordlocator,b.createdutc parentbookingutc, b.bookingid parentbookingid, b.bookingparentid grantparentbookingid from stage.pnrbookingparent1 a, ods.booking b where a.grantparentbookingid=b.bookingid and b.bookingparentid=0\")\n  sql = \"insert into stage.pnrbookingparent (bookingid,bookingcreateddatetimeutc,pnr,parentpnr\" \n  sql = sql+ \",parentbookingcreateddatetimeutc,parentbookingid,grantparentbookingid)SELECT b.bookingid,\" \n  sql = sql+ \"b.createdutc AS bookingcreateddatetimeutc,b.recordlocator AS pnr,bp.recordlocator parentpnr,\" \n  sql = sql+ \"bp.createdutc parentbookingutc,bp.bookingid parentbookingid,bp.bookingparentid grantparentbookingid \" \n  sql = sql+ \"from stage.pnrbookingparent1 b, ods.booking bp where b.grantparentbookingid=bp.bookingid and \" \n  sql = sql+ \"bp.bookingparentid=0 AND NOT EXISTS (SELECT 1 FROM stage.pnrbookingparent AS pbp WHERE pbp.bookingid = b.bookingid)\"\n  \n  cursor.execute(sql)\n  \n  cursor.execute(\"delete from stage.pnrbookingparent2\")\n\n  cursor.execute(\"insert into stage.pnrbookingparent2 select a.bookingid,a.createdutc,a.recordlocator,b.recordlocator parent_recordlocator,b.createdutc parentbookingutc, b.bookingid parentbookingid, b.bookingparentid grantparentbookingid from stage.pnrbookingparent1 a, ods.booking b where a.grantparentbookingid=b.bookingid and b.bookingparentid>0\")\n\n  cursor.execute(\"delete from stage.pnrbookingparent1\")\n\n  cursor.execute(\"insert into stage.pnrbookingparent1 select * from stage.pnrbookingparent2\")\n\n  cursor.execute(\"SELECT count(*) from stage.pnrbookingparent1 \")\n  recordcount = cursor.fetchone()[0]\n  context.updateVariable(\"temp1_RecordCount\", recordcount)\n  loopcnt+=1\n  #print loopcnt\n  print \"Record Inserted: \"+ str(temp1_RecordCount)+\";\"\n  if loopcnt == 10:\n    break\n## Loop End\n\n#cursor.execute(\"drop table stage.pnrbookingparent1\") ## Drop temporary table 1\n#cursor.execute(\"drop table stage.pnrbookingparent2\") ## Drop temporary table 1\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"64412":{"id":64412,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-336,"y":16,"width":32,"height":32,"inputConnectorIDs":[64423],"outputSuccessConnectorIDs":[64422],"outputFailureConnectorIDs":[64430],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"load stage.pnrbookingparent"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/****************************************\n\tload new pnr split/divided pnrs \n    \n    identify any bookings with a parentid and the parentid does not have parentid\n****************************************/\nINSERT INTO stage.pnrbookingparent \n(bookingid,\nbookingcreateddatetimeutc,\npnr,\nparentpnr,\nparentbookingcreateddatetimeutc,\nparentbookingid,\ngrantparentbookingid)\nSELECT \nb.bookingid \n,b.createdutc AS bookingcreateddatetimeutc\n,b.recordlocator AS pnr\n,bp.recordlocator parentpnr\n,bp.createdutc parentbookingutc\n,bp.bookingid parentbookingid\n,bp.bookingparentid grantparentbookingid \nFROM ods.booking AS b\n\tINNER JOIN ods.booking AS bp\n\tON b.bookingparentid=bp.bookingid \nWHERE bp.bookingparentid=0 \n/*\nAND b.createdutc >= '2018-01-01'\nAND b.createdutc < '2018-07-02'\n*/\nAND b.createdutc >= '${maxcreatedutc}'\nAND NOT EXISTS (SELECT 1 FROM stage.pnrbookingparent AS pbp\n                \tWHERE pbp.pnr = b.recordlocator)                 "}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"64413":{"id":64413,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-160,"y":16,"width":32,"height":32,"inputConnectorIDs":[64422],"outputSuccessConnectorIDs":[64420],"outputFailureConnectorIDs":[64429],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"load stage.pnrbookingparent1"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/********************************************\n\tload split pnrs who parent pnrs were split \n    \n    this is ised to loop through the multiple parent chain\n    \n    drop the table it all ready exists\n*********************************************/\n--create table stage.pnrbookingparent1 AS \nDROP TABLE stage.pnrbookingparent1;\nselect \na.bookingid\n,a.createdutc\n,a.recordlocator\n,b.recordlocator parent_recordlocator\n,b.createdutc parentbookingutc\n,b.bookingid parentbookingid\n,b.bookingparentid grantparentbookingid\nINTO stage.pnrbookingparent1 \nFROM ods.booking a, \nods.booking b \nwhere a.bookingparentid=b.bookingid \nand b.bookingparentid>0 \nand b.createdutc > '${maxcreatedutc}'"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"64414":{"id":64414,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":0,"y":16,"width":32,"height":32,"inputConnectorIDs":[64420],"outputSuccessConnectorIDs":[64421],"outputFailureConnectorIDs":[64431],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"stage.pnrbookingparent2"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/****************************************\n\n\tcreate second temporary table to loop through the parent chain\n\n****************************************/\n\nDROP TABLE stage.pnrbookingparent2;\n\nSELECT * \nINTO stage.pnrbookingparent2\nFROM stage.pnrbookingparent1 where 1=2"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"64415":{"id":64415,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":384,"y":16,"width":32,"height":32,"inputConnectorIDs":[64419],"outputSuccessConnectorIDs":[64424],"outputFailureConnectorIDs":[64428],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"truncate temp tables"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"TRUNCATE TABLE stage.pnrbookingparent1;\nTRUNCATE TABLE stage.pnrbookingparent2"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"64416":{"id":64416,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":528,"y":16,"width":32,"height":32,"inputConnectorIDs":[64424],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"64417":{"id":64417,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-176,"y":192,"width":32,"height":32,"inputConnectorIDs":[64432,64427,64428,64429,64430,64431],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[64425],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"64418":{"id":64418,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":352,"y":192,"width":32,"height":32,"inputConnectorIDs":[64425],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"64419":{"id":64419,"sourceID":64411,"targetID":64415},"64420":{"id":64420,"sourceID":64413,"targetID":64414},"64421":{"id":64421,"sourceID":64414,"targetID":64411},"64422":{"id":64422,"sourceID":64412,"targetID":64413},"64423":{"id":64423,"sourceID":64410,"targetID":64412},"64424":{"id":64424,"sourceID":64415,"targetID":64416}},"failureConnectors":{"64432":{"id":64432,"sourceID":64411,"targetID":64417},"64427":{"id":64427,"sourceID":64410,"targetID":64417},"64428":{"id":64428,"sourceID":64415,"targetID":64417},"64429":{"id":64429,"sourceID":64413,"targetID":64417},"64430":{"id":64430,"sourceID":64412,"targetID":64417},"64431":{"id":64431,"sourceID":64414,"targetID":64417}},"unconditionalConnectors":{"64425":{"id":64425,"sourceID":64417,"targetID":64418},"64426":{"id":64426,"sourceID":64409,"targetID":64410}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"canUndo":false,"undoCommand":"","undoCreated":-1,"canRedo":false,"redoCommand":"","redoCreated":-1,"notes":{"64407":{"id":64407,"x":-644,"y":-104,"width":422,"height":68,"text":"Identify PNRS with parent/original PNR they were created (split) from\n\nupdate: 2019-11-06","colour":"e6e63c"},"64408":{"id":64408,"x":103,"y":-70,"width":188,"height":182,"text":"loop through the parent booking records to identify the original pnr for each of the pnrs\n","colour":"e6e63c"}},"variables":{"maxcreatedutc":{"definition":{"name":"maxcreatedutc","type":"DATETIME","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"2019-01-01"},"maxeventdate":{"definition":{"name":"maxeventdate","type":"DATETIME","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"9999-12-31 00:00:00"},"temp1_RecordCount":{"definition":{"name":"temp1_RecordCount","type":"DECIMAL","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"1"}},"grids":{}},"info":{"name":"PNR - Divided PNR Load","description":"identifies pnrs that were split from a parent pnr","type":"ORCHESTRATION"}}