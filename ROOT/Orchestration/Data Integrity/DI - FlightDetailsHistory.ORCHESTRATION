{"job":{"components":{"14694":{"id":14694,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-384,"y":-16,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[14846],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"14738":{"id":14738,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-160,"y":80,"width":32,"height":32,"inputConnectorIDs":[14846],"outputSuccessConnectorIDs":[14853],"outputFailureConnectorIDs":[14856],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check NULL"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = \"SELECT count (*) FROM  public.flightdetailhistory  WHERE (sdt is NULL OR sdt = '1900-01-01') \"\ncursor.execute(sql1)\nrow1 = cursor.fetchone()\n\nif row1:\n  stdnulls = row1[0]\n  print (\"Number of records with Null or default value for std: \" + str(stdnulls))\n  \n#NULL check eventuser\ncursor = context.cursor()\nsql2 = \"SELECT count (*) FROM  public.flightdetailhistory  WHERE (sat is NULL OR sat = '1900-01-01') \"\ncursor.execute(sql2)\nrow2 = cursor.fetchone()\n\nif row2:\n  stanulls = row2[0]\n  print (\"Number of records with Null or default value for sta: \" +str(stanulls))\n    \n#null check eventlocation \ncursor = context.cursor()\nsql3 = \"SELECT count (*) FROM  public.flightdetailhistory  WHERE (edt is NULL OR edt = '1900-01-01') \"\ncursor.execute(sql3)\nrow3 = cursor.fetchone()\n\nif row3:\n  etdnulls = row3[0]\n  print (\"Number of records with Null or default value for etd: \" + str(etdnulls))\n  \n  \n#NULL check std\ncursor = context.cursor()\nsql4 = \"SELECT count (*) FROM  public.flightdetailhistory  WHERE (eat is NULL OR eat = '1900-01-01') \"\ncursor.execute(sql4)\nrow4 = cursor.fetchone()\n\nif row4:\n  etanulls = row4[0]\n  print (\"Number of records with Null or default value for eta: \" +str(etanulls))\n\n\n  \nif (stdnulls > 0) or (stanulls > 0) or (etdnulls > 0) or (etanulls > 0):\n\n  message = \"\\nNull check results: \\n\"\n  message = message + \"Number of records with Null or default value for std: \" + str(stdnulls) +\"\\n\"\n  message = message + \"Number of records with Null or default value for sta: \" + str(stanulls) +\"\\n\"\n  message = message + \"Number of records with Null or default value for etd: \" + str(etdnulls) +\"\\n\"\n  message = message + \"Number of records with Null or default value for eta: \" + str(etanulls) +\"\\n\"\n\n  message = message + \"There are records with default value or null value in  public.flightdetailhistory table. Please check the FlightDetailsHistory ETL process. \"\n  \n  context.updateVariable(\"Errormessage\", message)\n  print message\n  raise Exception    \n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"14749":{"id":14749,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":-160,"y":-48,"width":32,"height":32,"inputConnectorIDs":[14856],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[15113],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 0"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-west-2"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL_DEV"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AWS Notification Message"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"14760":{"id":14760,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-32,"y":16,"width":32,"height":32,"inputConnectorIDs":[14853,15113],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[17193],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"14837":{"id":14837,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":144,"y":16,"width":32,"height":32,"inputConnectorIDs":[17193],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"14853":{"id":14853,"sourceID":14738,"targetID":14760}},"failureConnectors":{"14856":{"id":14856,"sourceID":14738,"targetID":14749}},"unconditionalConnectors":{"15113":{"id":15113,"sourceID":14749,"targetID":14760},"17193":{"id":17193,"sourceID":14760,"targetID":14837},"14846":{"id":14846,"sourceID":14694,"targetID":14738}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"canUndo":true,"undoCommand":"Edit Note","undoCreated":1568307106366,"canRedo":false,"redoCommand":"","redoCreated":-1,"notes":{"14703":{"id":14703,"x":-502,"y":-149,"width":250,"height":58,"text":"checking for \n1. Null values / default values)\n","colour":"e6e63c"},"14708":{"id":14708,"x":-500,"y":-241,"width":241,"height":54,"text":"DI check Flight Details History\n\nLast updated: 2019-09-06","colour":"e6e63c"},"14716":{"id":14716,"x":-213,"y":-131,"width":258,"height":267,"text":"QA #1: script to check for NULL values.","colour":"e6e63c"}},"variables":{},"grids":{}},"info":{"name":"DI - FlightDetailsHistory","description":"","type":"ORCHESTRATION"}}