{"job":{"components":{"17067":{"id":17067,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-384,"y":-16,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[17087],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17068":{"id":17068,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-160,"y":80,"width":32,"height":32,"inputConnectorIDs":[17087],"outputSuccessConnectorIDs":[17078],"outputFailureConnectorIDs":[17089],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 0"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = \"SELECT count (*) FROM  public.flightdetailhistory  WHERE (sdt is NULL OR sdt = '1900-01-01') \"\ncursor.execute(sql1)\nrow1 = cursor.fetchone()\n\nif row1:\n  stdnulls = row1[0]\n  print (\"Number of records with Null or default value for std: \" + str(stdnulls))\n  \n#NULL check eventuser\ncursor = context.cursor()\nsql2 = \"SELECT count (*) FROM  public.flightdetailhistory  WHERE (sat is NULL OR sat = '1900-01-01') \"\ncursor.execute(sql2)\nrow2 = cursor.fetchone()\n\nif row2:\n  stanulls = row2[0]\n  print (\"Number of records with Null or default value for sta: \" +str(stanulls))\n    \n#null check eventlocation \ncursor = context.cursor()\nsql3 = \"SELECT count (*) FROM  public.flightdetailhistory  WHERE (edt is NULL OR edt = '1900-01-01') \"\ncursor.execute(sql3)\nrow3 = cursor.fetchone()\n\nif row3:\n  etdnulls = row3[0]\n  print (\"Number of records with Null or default value for etd: \" + str(etdnulls))\n  \n  \n#NULL check std\ncursor = context.cursor()\nsql4 = \"SELECT count (*) FROM  public.flightdetailhistory  WHERE (eat is NULL OR eat = '1900-01-01') \"\ncursor.execute(sql4)\nrow4 = cursor.fetchone()\n\nif row4:\n  etanulls = row4[0]\n  print (\"Number of records with Null or default value for eta: \" +str(etanulls))\n\n\n  \nif (stdnulls > 0) or (stanulls > 0) or (etdnulls > 0) or (etanulls > 0):\n\n  message = \"\\nNull check results: \\n\"\n  message = message + \"Number of records with Null or default value for std: \" + str(stdnulls) +\"\\n\"\n  message = message + \"Number of records with Null or default value for sta: \" + str(stanulls) +\"\\n\"\n  message = message + \"Number of records with Null or default value for etd: \" + str(etdnulls) +\"\\n\"\n  message = message + \"Number of records with Null or default value for eta: \" + str(etanulls) +\"\\n\"\n\n  message = message + \"There are records with default value or null value in  public.flightdetailhistory table. Please check the FlightDetailsHistory ETL process. \"\n  \n  context.updateVariable(\"Errormessage\", message)\n  print message\n  raise Exception    \n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17069":{"id":17069,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":-160,"y":-48,"width":32,"height":32,"inputConnectorIDs":[17089],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[17083],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 0"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-west-2"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL_DEV"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AWS Notification Message"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17070":{"id":17070,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-32,"y":16,"width":32,"height":32,"inputConnectorIDs":[17078,17083],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[17085],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17071":{"id":17071,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":160,"y":80,"width":32,"height":32,"inputConnectorIDs":[17085],"outputSuccessConnectorIDs":[17080],"outputFailureConnectorIDs":[17090],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 1"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\ncursor = context.cursor()\nsql1 = '''select 'sdt' as columnname,  count (*) recount FROM  public.flightdetailhistory  WHERE sdt = '1900-01-01'\nunion  select 'sat' as columnname, count (*) FROM  public.flightdetailhistory  WHERE sat = '1900-01-01'\nunion select 'stdutc' as columnname, count(*) from public.flightdetailhistory  WHERE stdutc = '1900-01-01' \nunion select 'stautc' as columnname, count(*) from public.flightdetailhistory  WHERE stautc = '1900-01-01'\nunion select 'edt' as columnname, count(*) from public.flightdetailhistory  WHERE edt = '1900-01-01'\nunion select 'eat' as columnname, count(*) from public.flightdetailhistory  WHERE eat = '1900-01-01'\nunion select 'etdutc' as columnname, count(*) from public.flightdetailhistory  WHERE etdutc = '1900-01-01'\nunion select 'etautc' as columnname, count(*) from public.flightdetailhistory  WHERE etautc = '1900-01-01' '''\ncursor.execute(sql1)\nchunks = [\"\\nDefault value check results: \\n\"]\nresult = cursor.fetchall()\nfor r in result:\n    chunks.append(\"Number of Default values in \"+ str(r[0])+ \" : \" +str(r[1]) +\"\\n\")\nmessage = ''.join(chunks)  \n  \ncontext.updateVariable(\"Errormessage\",message)\nprint (message)\nraise Exception      \n\n\n\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17072":{"id":17072,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":160,"y":-48,"width":32,"height":32,"inputConnectorIDs":[17090],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[17086],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 1"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-west-2"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL_DEV"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AWS Notification Message"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17073":{"id":17073,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":288,"y":16,"width":32,"height":32,"inputConnectorIDs":[17080,17086],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[17084],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17074":{"id":17074,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":512,"y":80,"width":32,"height":32,"inputConnectorIDs":[17084],"outputSuccessConnectorIDs":[17079],"outputFailureConnectorIDs":[17088],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 2"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n\ncursor = context.cursor()\nsql1 = '''select 'sdt' as columnname,  count (*) recount FROM  public.flightdetailhistory  WHERE sdt is NULL\nunion  select 'sat' as columnname, count (*) FROM  public.flightdetailhistory  WHERE sat is NULL \nunion select 'stdutc' as columnname, count(*) from public.flightdetailhistory  WHERE stdutc is NULL \nunion select 'stautc' as columnname, count(*) from public.flightdetailhistory  WHERE stautc is NULL \nunion select 'edt' as columnname, count(*) from public.flightdetailhistory  WHERE edt is NULL \nunion select 'eat' as columnname, count(*) from public.flightdetailhistory  WHERE eat is NULL \nunion select 'etdutc' as columnname, count(*) from public.flightdetailhistory  WHERE etdutc is NULL \nunion select 'etautc' as columnname, count(*) from public.flightdetailhistory  WHERE etautc is NULL  '''\ncursor.execute(sql1)\nchunks = [\"\\nNull check results: \\n\"]\nresult = cursor.fetchall()\nfor r in result:\n    chunks.append(\"Number of null in \"+ str(r[0])+ \" : \" +str(r[1]) +\"\\n\")\nmessage = ''.join(chunks)  \n  \ncontext.updateVariable(\"Errormessage\",message)\nprint (message)\nraise Exception     \n  \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17075":{"id":17075,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":512,"y":-48,"width":32,"height":32,"inputConnectorIDs":[17088],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[17081],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 2"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-west-2"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL_DEV"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AWS Notification Message"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17076":{"id":17076,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":656,"y":0,"width":32,"height":32,"inputConnectorIDs":[17079,17081],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[17082],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 2"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"17077":{"id":17077,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":800,"y":0,"width":32,"height":32,"inputConnectorIDs":[17082],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"17078":{"id":17078,"sourceID":17068,"targetID":17070},"17079":{"id":17079,"sourceID":17074,"targetID":17076},"17080":{"id":17080,"sourceID":17071,"targetID":17073}},"failureConnectors":{"17088":{"id":17088,"sourceID":17074,"targetID":17075},"17089":{"id":17089,"sourceID":17068,"targetID":17069},"17090":{"id":17090,"sourceID":17071,"targetID":17072}},"unconditionalConnectors":{"17081":{"id":17081,"sourceID":17075,"targetID":17076},"17082":{"id":17082,"sourceID":17076,"targetID":17077},"17083":{"id":17083,"sourceID":17069,"targetID":17070},"17084":{"id":17084,"sourceID":17073,"targetID":17074},"17085":{"id":17085,"sourceID":17070,"targetID":17071},"17086":{"id":17086,"sourceID":17072,"targetID":17073},"17087":{"id":17087,"sourceID":17067,"targetID":17068}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"canUndo":true,"undoCommand":"Set Parameter","undoCreated":1568665234765,"canRedo":false,"redoCommand":"","redoCreated":-1,"notes":{"17062":{"id":17062,"x":-502,"y":-149,"width":250,"height":58,"text":"checking for Null values / default values)","colour":"e6e63c"},"17063":{"id":17063,"x":-500,"y":-241,"width":250,"height":58,"text":"DI check Flight Details History\n\nLast updated: 2019-09-05","colour":"e6e63c"},"17064":{"id":17064,"x":-231,"y":-124,"width":258,"height":267,"text":"QA #1: script to check for NULL values.","colour":"e6e63c"},"17065":{"id":17065,"x":97,"y":-137,"width":258,"height":267,"text":"QA #2: script to check for irregular datetimes","colour":"e6e63c"},"17066":{"id":17066,"x":451,"y":-139,"width":258,"height":267,"text":"QA #3: script to check for records with only default values.","colour":"e6e63c"}},"variables":{},"grids":{}},"info":{"name":"DI - FlightDetailsHistory_20190906copy","description":"","type":"ORCHESTRATION"}}