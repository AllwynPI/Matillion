{"job":{"components":{"63669":{"id":63669,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-736,"y":-48,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63721],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63670":{"id":63670,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-544,"y":-48,"width":32,"height":32,"inputConnectorIDs":[63721],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63720],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check Nulls"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = '''\nselect 'Flight after Jun 1 2019, std' as columnname,  count (*) recount FROM  public.flightdetailhistory  WHERE std is NULL AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, sta' as columnname, count (*) FROM  public.flightdetailhistory  WHERE sta is NULL AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, stdutc' as columnname, count(*) from public.flightdetailhistory  WHERE stdutc is NULL AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, stautc' as columnname, count(*) from public.flightdetailhistory  WHERE stautc is NULL AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, etd' as columnname, count(*) from public.flightdetailhistory  WHERE etd is NULL AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, eta' as columnname, count(*) from public.flightdetailhistory  WHERE eta is NULL AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, etdutc' as columnname, count(*) from public.flightdetailhistory  WHERE etdutc is NULL AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, etautc' as columnname, count(*) from public.flightdetailhistory  WHERE etautc is NULL AND flightdate >= '2019-06-01 00:00:00'\n\n\nunion select 'Flight before Jun 1 2019, std' as columnname,  count (*) recount FROM  public.flightdetailhistory  WHERE std is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, sta' as columnname, count (*) FROM  public.flightdetailhistory  WHERE sta is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, stdutc' as columnname, count(*) from public.flightdetailhistory  WHERE stdutc is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, stautc' as columnname, count(*) from public.flightdetailhistory  WHERE stautc is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etd' as columnname, count(*) from public.flightdetailhistory  WHERE etd is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, eta' as columnname, count(*) from public.flightdetailhistory  WHERE eta is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etdutc' as columnname, count(*) from public.flightdetailhistory  WHERE etdutc is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etautc' as columnname, count(*) from public.flightdetailhistory  WHERE etautc is NULL AND flightdate < '2019-06-01 00:00:00'\n '''\ncursor.execute(sql1)\nchunks = []\nresult = cursor.fetchall()\nflag = 0\nfor r in result:\n    if r[1] > 0:\n        flag = 1\n        chunks.append(\"Number of null in \"+ str(r[0])+ \" : \" +str(r[1]) +\"\\n\")\nmessage = ''.join(chunks)  \n\ncontext.updateVariable(\"null_flag\", flag)  \ncontext.updateVariable(\"Errormessage\",message)\n\nprint (message)\nprint(null_flag)\nraise Exception      \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63671":{"id":63671,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":-352,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63705],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63712],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63672":{"id":63672,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-352,"y":48,"width":32,"height":32,"inputConnectorIDs":[63712,63704],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63719],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63673":{"id":63673,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":1872,"y":-112,"width":32,"height":32,"inputConnectorIDs":[63723],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63674":{"id":63674,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-176,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63719],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63718],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Valid datetime Fields"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = '''\n\nselect 'Flight after Jun 1 2019, std' as columnname,  count (*) recount FROM  public.flightdetailhistory  WHERE std = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, sta' as columnname, count (*) FROM  public.flightdetailhistory  WHERE sta = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, stdutc' as columnname, count(*) from public.flightdetailhistory  WHERE stdutc = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, stautc' as columnname, count(*) from public.flightdetailhistory  WHERE stautc = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, etd' as columnname, count(*) from public.flightdetailhistory  WHERE etd = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, eta' as columnname, count(*) from public.flightdetailhistory  WHERE eta = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, etdutc' as columnname, count(*) from public.flightdetailhistory  WHERE etdutc = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, etautc' as columnname, count(*) from public.flightdetailhistory  WHERE etautc = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\n\nunion select 'Flight before Jun 1 2019, std' as columnname,  count (*) recount FROM  public.flightdetailhistory  WHERE std = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, sta' as columnname, count (*) FROM  public.flightdetailhistory  WHERE sta = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, stdutc' as columnname, count(*) from public.flightdetailhistory  WHERE stdutc = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, stautc' as columnname, count(*) from public.flightdetailhistory  WHERE stautc = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etd' as columnname, count(*) from public.flightdetailhistory  WHERE etd = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, eta' as columnname, count(*) from public.flightdetailhistory  WHERE eta = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etdutc' as columnname, count(*) from public.flightdetailhistory  WHERE etdutc = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etautc' as columnname, count(*) from public.flightdetailhistory  WHERE etautc = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\n\n\n'''\ncursor.execute(sql1)\nchunks = []\ndflag = 0\nresult = cursor.fetchall()\nfor r in result:\n    if r[1] > 0 :\n        dflag = 1      \n    \tchunks.append(\"Number of Default values in \"+ str(r[0])+ \" : \" +str(r[1]) +\"\\n\")\nmessage = ''.join(chunks)  \n\ncontext.updateVariable(\"default_value_flag\", dflag) \ncontext.updateVariable(\"Errormessage\",message)\n\nprint (message)\nprint(default_value_flag)\nraise Exception      \n     \n\n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63675":{"id":63675,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":32,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63706],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63725],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 1"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63676":{"id":63676,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":32,"y":48,"width":32,"height":32,"inputConnectorIDs":[63703,63725],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63717],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63677":{"id":63677,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":256,"y":-48,"width":32,"height":32,"inputConnectorIDs":[63717],"outputSuccessConnectorIDs":[63699],"outputFailureConnectorIDs":[63728],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check last runtime"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n#null last runtime\ncursor = context.cursor()\nsql1 = \"select datediff(hours, max(modifieddttm) , getdate())  from public.flightdetailhistory \"\ncursor.execute(sql1)\ntimediff = cursor.fetchone()[0]\n             \n\nif timediff > 6:  \n  message = \"There is more than 6 hours since the flight history table has been updated. Please check the FlightDetailsHistory ETL process.\\n\"\n  message = message + \"Total Delay : \"+ str(timediff) + \" hours \\n\" \n  context.updateVariable(\"Errormessage\", message)\n  print message\n  raise Exception   \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63678":{"id":63678,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":384,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63728],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63707],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 2"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63679":{"id":63679,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":384,"y":48,"width":32,"height":32,"inputConnectorIDs":[63699,63707],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63714],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 2"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63680":{"id":63680,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":544,"y":-48,"width":32,"height":32,"inputConnectorIDs":[63714],"outputSuccessConnectorIDs":[63697],"outputFailureConnectorIDs":[63730],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Unique leghashkey"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n# Unique leghashkey Record\ncursor = context.cursor()\nsql1 = ''' SELECT COUNT (*) as recordcount FROM (\n SELECT leghashkey, carriercode,flightnumber,flightdate,departurestation,effectivedatetimeutc, count (*) \n FROM public.flightdetailhistory GROUP BY leghashkey, carriercode,flightnumber,flightdate,departurestation,effectivedatetimeutc\n HAVING count (*) > 1 ) t '''\n\ncursor.execute(sql1)\n\ndup_leghashkey_rec = cursor.fetchone()[0]\n\nif dup_leghashkey_rec>0 :\n  message = \"Number of duplicate leghashkey Records are :\"\n  message = message + str(dup_leghashkey_rec) + \"\\n\"\n  message = message + \"Please validate these records\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception      \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63681":{"id":63681,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":688,"y":48,"width":32,"height":32,"inputConnectorIDs":[63697,63715],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63710],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 3"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63682":{"id":63682,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":688,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63730],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63715],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 3"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63683":{"id":63683,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":816,"y":-48,"width":32,"height":32,"inputConnectorIDs":[63710],"outputSuccessConnectorIDs":[63698],"outputFailureConnectorIDs":[63727],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Unique Active Record"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' SELECT COUNT (*) as recordcount FROM (\n SELECT carriercode,flightnumber,flightdate,departurestation,arrivalstation, effectivedatetimeutc, count (*) \n FROM public.flightdetailhistory \n where activeflag='1'\n GROUP BY carriercode,flightnumber,flightdate,departurestation,arrivalstation, effectivedatetimeutc\n HAVING count (*) > 1 ) t '''\n\n\ncursor.execute(sql1)\n\ndup_Active_rec = cursor.fetchone()[0]\n\nif dup_Active_rec > 0:\n  message = \"Number of duplicate Active Records are :\"\n  message = message + str(dup_Active_rec) + \"\\n\"\n  message = message + \"Please validate these records\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception     \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63684":{"id":63684,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":944,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63727],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63709],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 4"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63685":{"id":63685,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":944,"y":48,"width":32,"height":32,"inputConnectorIDs":[63698,63709],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63722],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 4"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63686":{"id":63686,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-464,"y":-48,"width":32,"height":32,"inputConnectorIDs":[63720],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[63704],"outputFalseConnectorIDs":[63705],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If 0"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"null_flag"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63687":{"id":63687,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-96,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63718],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[63703],"outputFalseConnectorIDs":[63706],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If 1"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"default_value_flag"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63688":{"id":63688,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1344,"y":-48,"width":32,"height":32,"inputConnectorIDs":[63716],"outputSuccessConnectorIDs":[63701],"outputFailureConnectorIDs":[63726],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"missing active flight records"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' select count(*) from (\nSELECT DISTINCT\neventname\n,carriercode\n,flightnumber\n,departuredate\n,departurestation\n,arrivalstation\n,eventdatetimeutc\nFROM public.pnrpassengerhistory AS pph\nWHERE eventname NOT IN ('') AND carriercode = 'PD'\n/* exclude events before the day of departure */\nAND eventdatetimeutc >= departuredate\n/*check if the active record was found in the the fdh table for the time period */\nAND NOT EXISTS (SELECT 1 FROM public.flightdetailhistory AS fdh1\nWHERE pph.carriercode = fdh1.carriercode\nAND pph.flightnumber = fdh1.flightnumber\nAND pph.departuredate = fdh1.flightdate\nAND pph.departurestation = fdh1.departurestation\nAND pph.arrivalstation = fdh1.arrivalstation\nAND fdh1.activeflag = 1\nAND pph.eventdatetimeutc BETWEEN fdh1.effectivedatetimeutc AND fdh1.expireddatetimeutc) ) '''\n\n\ncursor.execute(sql1)\n\nmissing_rec = cursor.fetchone()[0]\n\nif missing_rec > 0:\n  message = \"Number of missing active records in the flight detail history table based on events in the pnr flight history table are : \"\n  message = message + str(missing_rec) + \"\\n\"\n  message = message + \"Please validate these records in public.flightdetailhistory table\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception     \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63689":{"id":63689,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1440,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63726],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63713],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 6"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63690":{"id":63690,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1440,"y":32,"width":32,"height":32,"inputConnectorIDs":[63713,63701],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63724],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"of Or 5"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63691":{"id":63691,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1120,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63722],"outputSuccessConnectorIDs":[63700],"outputFailureConnectorIDs":[63731],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Missing flight detail record"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' select count(*) from (\nSELECT DISTINCT\ncarriercode\n,flightnumber\n,departuredate\n,departurestation\n,arrivalstation\nFROM public.pnrpassengerhistory AS pph\nWHERE eventname NOT IN ('') AND carriercode = 'PD'\n/* exclude events before the day of departure */\nAND eventdatetimeutc >= departuredate\n/*check if the active record was found in the the fdh table for the time period */\nAND NOT EXISTS (SELECT 1 FROM public.flightdetailhistory AS fdh1\nWHERE pph.carriercode = fdh1.carriercode\nAND pph.flightnumber = fdh1.flightnumber\nAND pph.departuredate = fdh1.flightdate\nAND pph.departurestation = fdh1.departurestation\nAND pph.arrivalstation = fdh1.arrivalstation\nAND fdh1.activeflag = 1)) '''\n\n\ncursor.execute(sql1)\n\nmissing_rec = cursor.fetchone()[0]\n\nif missing_rec > 0:\n  message = \"There are \" + str(missing_rec) + \" missing flight records in the flight detail history table based on events in the pnr flight history table.\"\n  message = message + \"\\nThe flight records need to be added to the flighthistorytable. Please validate the public.flightdetailhistory process for issues.\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception     \n\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63692":{"id":63692,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1216,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63731],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63711],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 5"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63693":{"id":63693,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1216,"y":32,"width":32,"height":32,"inputConnectorIDs":[63700,63711],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63716],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or _ 4"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63694":{"id":63694,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1600,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63724],"outputSuccessConnectorIDs":[63702],"outputFailureConnectorIDs":[63729],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Checking for duplicate active records"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' select count(*)\nfrom public.flightdetailhistory as A,\npublic.flightdetailhistory as B\nwhere A.effectivedatetimeutc > B.effectivedatetimeutc and A.effectivedatetimeutc < B.expireddatetimeutc\nand A.flightnumber=B.flightnumber\nand A.flightdate=B.flightdate\nand A.departurestation=B.departurestation\nand A.arrivalstation=B.arrivalstation '''\n\n\ncursor.execute(sql1)\n\nmissing_rec = cursor.fetchone()[0]\n\nif missing_rec > 0:\n  message = \"Number of duplicate active records in flight detail history table based on flight number, flight date, departure station and arrival station are : \"\n  message = message + str(missing_rec) + \"\\n\"\n  message = message + \"Please validate these records in public.flightdetailhistory table\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception     \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63695":{"id":63695,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1712,"y":0,"width":32,"height":32,"inputConnectorIDs":[63702,63708],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63723],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 7"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63696":{"id":63696,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1712,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63729],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63708],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 7"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"63697":{"id":63697,"sourceID":63680,"targetID":63681},"63698":{"id":63698,"sourceID":63683,"targetID":63685},"63699":{"id":63699,"sourceID":63677,"targetID":63679},"63700":{"id":63700,"sourceID":63691,"targetID":63693},"63701":{"id":63701,"sourceID":63688,"targetID":63690},"63702":{"id":63702,"sourceID":63694,"targetID":63695}},"failureConnectors":{"63728":{"id":63728,"sourceID":63677,"targetID":63678},"63729":{"id":63729,"sourceID":63694,"targetID":63696},"63730":{"id":63730,"sourceID":63680,"targetID":63682},"63731":{"id":63731,"sourceID":63691,"targetID":63692},"63726":{"id":63726,"sourceID":63688,"targetID":63689},"63727":{"id":63727,"sourceID":63683,"targetID":63684}},"unconditionalConnectors":{"63712":{"id":63712,"sourceID":63671,"targetID":63672},"63713":{"id":63713,"sourceID":63689,"targetID":63690},"63714":{"id":63714,"sourceID":63679,"targetID":63680},"63715":{"id":63715,"sourceID":63682,"targetID":63681},"63716":{"id":63716,"sourceID":63693,"targetID":63688},"63717":{"id":63717,"sourceID":63676,"targetID":63677},"63718":{"id":63718,"sourceID":63674,"targetID":63687},"63719":{"id":63719,"sourceID":63672,"targetID":63674},"63720":{"id":63720,"sourceID":63670,"targetID":63686},"63721":{"id":63721,"sourceID":63669,"targetID":63670},"63722":{"id":63722,"sourceID":63685,"targetID":63691},"63723":{"id":63723,"sourceID":63695,"targetID":63673},"63724":{"id":63724,"sourceID":63690,"targetID":63694},"63725":{"id":63725,"sourceID":63675,"targetID":63676},"63707":{"id":63707,"sourceID":63678,"targetID":63679},"63708":{"id":63708,"sourceID":63696,"targetID":63695},"63709":{"id":63709,"sourceID":63684,"targetID":63685},"63710":{"id":63710,"sourceID":63681,"targetID":63683},"63711":{"id":63711,"sourceID":63692,"targetID":63693}},"trueConnectors":{"63703":{"id":63703,"sourceID":63687,"targetID":63676},"63704":{"id":63704,"sourceID":63686,"targetID":63672}},"falseConnectors":{"63705":{"id":63705,"sourceID":63686,"targetID":63671},"63706":{"id":63706,"sourceID":63687,"targetID":63675}},"iterationConnectors":{},"noteConnectors":{},"canUndo":true,"undoCommand":"Rename Job","undoCreated":1576769101481,"canRedo":false,"redoCommand":"","redoCreated":-1,"notes":{"63660":{"id":63660,"x":-583,"y":-362,"width":542,"height":59,"text":"**DI check Flight Details History**\n\nLast updated: 2019-11-24","colour":"e6e63c"},"63661":{"id":63661,"x":-585,"y":-221,"width":308,"height":321,"text":"QA #1: script to check for NULL values.","colour":"e6e63c"},"63662":{"id":63662,"x":-221,"y":-208,"width":299,"height":312,"text":"Validate all the schedule time columns have valid date and time values. Default datetimes are not validate.","colour":"e6e63c"},"63663":{"id":63663,"x":155,"y":-205,"width":273,"height":314,"text":"Check the latest datetime in the table to make sure it is not older than 6 hours","colour":"e6e63c"},"63664":{"id":63664,"x":483,"y":-210,"width":241,"height":308,"text":"A unique record in the table is leghashkey, carriercode,flightnumber,flightdate,departurestation,effectivedatetimeutc","colour":"e6e63c"},"63665":{"id":63665,"x":760,"y":-205,"width":249,"height":299,"text":"A unique active record in the table ","colour":"e6e63c"},"63666":{"id":63666,"x":1299,"y":-202,"width":240,"height":297,"text":"Identify missing active records in flight detail history table.","colour":"e6e63c"},"63667":{"id":63667,"x":1034,"y":-203,"width":240,"height":297,"text":"Identify missing flight records in flight detail history table.","colour":"e6e63c"},"63668":{"id":63668,"x":1568,"y":-201,"width":240,"height":297,"text":"Identify duplicate active records in flight detail history table with respect to flight number, flight date, departure station and arrival station.","colour":"e6e63c"}},"variables":{"default_value_flag":{"definition":{"name":"default_value_flag","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"null_flag":{"definition":{"name":"null_flag","type":"DECIMAL","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null}},"grids":{}},"info":{"name":"DI - Flight Detail History Data Checks_old","description":"validates the quality and integrity of the fdh table","type":"ORCHESTRATION"}}