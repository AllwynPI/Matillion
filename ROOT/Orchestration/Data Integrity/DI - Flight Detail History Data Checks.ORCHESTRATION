{"job":{"components":{"67681":{"id":67681,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-736,"y":-48,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67733],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67682":{"id":67682,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-544,"y":-48,"width":32,"height":32,"inputConnectorIDs":[67733],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67732],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check Nulls"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = '''\nselect TO_CHAR(flightdate,'YYYY-MM') +' for std' columnname,  count (*) recount FROM public.flightdetailhistory  WHERE std is NULL AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM') \nunion select TO_CHAR(flightdate,'YYYY-MM') +' for sta' columnname,  count (*) recount FROM public.flightdetailhistory  WHERE sta is NULL AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM') \nunion select TO_CHAR(flightdate,'YYYY-MM') +' for stdutc' columnname,  count (*) recount FROM public.flightdetailhistory  WHERE stdutc is NULL AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM') \nunion select TO_CHAR(flightdate,'YYYY-MM') +' for stautc' columnname,  count (*) recount FROM public.flightdetailhistory  WHERE stautc is NULL AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM') \nunion select TO_CHAR(flightdate,'YYYY-MM') +' for etd' columnname,  count (*) recount FROM public.flightdetailhistory  WHERE etd is NULL AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM') \nunion select TO_CHAR(flightdate,'YYYY-MM') +' for eta' columnname,  count (*) recount FROM public.flightdetailhistory  WHERE eta is NULL AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM') \nunion select TO_CHAR(flightdate,'YYYY-MM') +' for etdutc' columnname,  count (*) recount FROM public.flightdetailhistory  WHERE etdutc is NULL AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM') \nunion select TO_CHAR(flightdate,'YYYY-MM') +' for etautc' columnname,  count (*) recount FROM public.flightdetailhistory  WHERE etautc is NULL AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM') \n\n/* not used any more\nunion select 'Flight before Jun 1 2019, std' as columnname,  count (*) recount FROM  public.flightdetailhistory  WHERE std is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, sta' as columnname, count (*) FROM  public.flightdetailhistory  WHERE sta is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, stdutc' as columnname, count(*) from public.flightdetailhistory  WHERE stdutc is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, stautc' as columnname, count(*) from public.flightdetailhistory  WHERE stautc is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etd' as columnname, count(*) from public.flightdetailhistory  WHERE etd is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, eta' as columnname, count(*) from public.flightdetailhistory  WHERE eta is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etdutc' as columnname, count(*) from public.flightdetailhistory  WHERE etdutc is NULL AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etautc' as columnname, count(*) from public.flightdetailhistory  WHERE etautc is NULL AND flightdate < '2019-06-01 00:00:00'\n*/\nORDER BY columnname DESC'''\ncursor.execute(sql1)\nchunks = []\nresult = cursor.fetchall()\nflag = 0\nfor r in result:\n    if r[1] > 0:\n        flag = 1\n        chunks.append(\"Number of NULL(s) in the month of \"+ str(r[0])+ \" : \" +str(r[1]) +\"\\n\")\nmessage = ''.join(chunks)  \n\ncontext.updateVariable(\"null_flag\", flag)  \ncontext.updateVariable(\"Errormessage\",message)\n\nprint (message)\n#print(null_flag)\nraise Exception      \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67683":{"id":67683,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":-352,"y":-144,"width":32,"height":32,"inputConnectorIDs":[67717],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67724],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67684":{"id":67684,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-352,"y":48,"width":32,"height":32,"inputConnectorIDs":[67716,67724],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67731],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67685":{"id":67685,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":1872,"y":-112,"width":32,"height":32,"inputConnectorIDs":[67735],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67686":{"id":67686,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-176,"y":-64,"width":32,"height":32,"inputConnectorIDs":[67731],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67730],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Valid datetime Fields"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = '''\n\nselect 'sta, in flight month:' +  TO_CHAR(flightdate,'YYYY-MM') AS columnname, count (*) recount, TO_CHAR(flightdate,'YYYY-MM') AS flightmonth FROM  public.flightdetailhistory  WHERE sta = '1900-01-01' AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM')\nUNION select 'std, in flight month:' +  TO_CHAR(flightdate,'YYYY-MM') AS columnname, count (*) recount, TO_CHAR(flightdate,'YYYY-MM') AS flightmonth FROM  public.flightdetailhistory  WHERE std = '1900-01-01' AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM')\nUNION select 'stdutc, in flight month:' +  TO_CHAR(flightdate,'YYYY-MM') AS columnname, count (*) recount, TO_CHAR(flightdate,'YYYY-MM') AS flightmonth FROM  public.flightdetailhistory  WHERE stdutc = '1900-01-01' AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM')\nUNION select 'stautc, in flight month:' +  TO_CHAR(flightdate,'YYYY-MM') AS columnname, count (*) recount, TO_CHAR(flightdate,'YYYY-MM') AS flightmonth FROM  public.flightdetailhistory  WHERE stautc = '1900-01-01' AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM')\nUNION select 'etdutc, in flight month:' +  TO_CHAR(flightdate,'YYYY-MM') AS columnname, count (*) recount, TO_CHAR(flightdate,'YYYY-MM') AS flightmonth FROM  public.flightdetailhistory  WHERE etdutc = '1900-01-01' AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM')\nUNION select 'etd, in flight month:' +  TO_CHAR(flightdate,'YYYY-MM') AS columnname, count (*) recount, TO_CHAR(flightdate,'YYYY-MM') AS flightmonth FROM  public.flightdetailhistory  WHERE etd = '1900-01-01' AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM')\nUNION select 'etautc, in flight month:' +  TO_CHAR(flightdate,'YYYY-MM') AS columnname, count (*) recount, TO_CHAR(flightdate,'YYYY-MM') AS flightmonth FROM  public.flightdetailhistory  WHERE etautc = '1900-01-01' AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM')\nUNION select 'eta, in flight month:' +  TO_CHAR(flightdate,'YYYY-MM') AS columnname, count (*) recount, TO_CHAR(flightdate,'YYYY-MM') AS flightmonth FROM  public.flightdetailhistory  WHERE eta = '1900-01-01' AND flightdate >= '2018-11-01' AND CAST (flightnumber as INTEGER) < 9000 GROUP BY TO_CHAR(flightdate,'YYYY-MM')\n/*\nunion select 'Flight after Jun 1 2019, sta' as columnname, count (*) FROM  public.flightdetailhistory  WHERE sta = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, stdutc' as columnname, count(*) from public.flightdetailhistory  WHERE stdutc = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, stautc' as columnname, count(*) from public.flightdetailhistory  WHERE stautc = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, etd' as columnname, count(*) from public.flightdetailhistory  WHERE etd = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, eta' as columnname, count(*) from public.flightdetailhistory  WHERE eta = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, etdutc' as columnname, count(*) from public.flightdetailhistory  WHERE etdutc = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\nunion select 'Flight after Jun 1 2019, etautc' as columnname, count(*) from public.flightdetailhistory  WHERE etautc = '1900-01-01 00:00:00' AND flightdate >= '2019-06-01 00:00:00'\n\nunion select 'Flight before Jun 1 2019, std' as columnname,  count (*) recount FROM  public.flightdetailhistory  WHERE std = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, sta' as columnname, count (*) FROM  public.flightdetailhistory  WHERE sta = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, stdutc' as columnname, count(*) from public.flightdetailhistory  WHERE stdutc = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, stautc' as columnname, count(*) from public.flightdetailhistory  WHERE stautc = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etd' as columnname, count(*) from public.flightdetailhistory  WHERE etd = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, eta' as columnname, count(*) from public.flightdetailhistory  WHERE eta = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etdutc' as columnname, count(*) from public.flightdetailhistory  WHERE etdutc = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\nunion select 'Flight before Jun 1 2019, etautc' as columnname, count(*) from public.flightdetailhistory  WHERE etautc = '1900-01-01 00:00:00' AND flightdate < '2019-06-01 00:00:00'\n*/\nORDER BY flightmonth DESC\n'''\ncursor.execute(sql1)\nchunks = []\ndflag = 0\nresult = cursor.fetchall()\nfor r in result:\n    if r[1] > 0 :\n        dflag = 1      \n    \tchunks.append(\"Default values for \"+ str(r[0])+ \" record(s): \" +str(r[1]) +\"\\n\")\nmessage = ''.join(chunks)  \n\ncontext.updateVariable(\"default_value_flag\", dflag) \ncontext.updateVariable(\"Errormessage\",message)\n\nprint (message)\nprint(default_value_flag)\nraise Exception      \n     \n\n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67687":{"id":67687,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":32,"y":-144,"width":32,"height":32,"inputConnectorIDs":[67718],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67737],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 1"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67688":{"id":67688,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":32,"y":48,"width":32,"height":32,"inputConnectorIDs":[67715,67737],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67729],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67689":{"id":67689,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":256,"y":-48,"width":32,"height":32,"inputConnectorIDs":[67729],"outputSuccessConnectorIDs":[67711],"outputFailureConnectorIDs":[67740],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check last runtime"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n#null last runtime\ncursor = context.cursor()\nsql1 = \"select datediff(hours, max(modifieddttm) , getdate())  from public.flightdetailhistory \"\ncursor.execute(sql1)\ntimediff = cursor.fetchone()[0]\n             \n\nif timediff > 6:  \n  message = \"There is more than 6 hours since the flight history table has been updated. Please check the FlightDetailsHistory ETL process.\\n\"\n  message = message + \"Total Delay : \"+ str(timediff) + \" hours \\n\" \n  context.updateVariable(\"Errormessage\", message)\n  print message\n  raise Exception   \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67690":{"id":67690,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":384,"y":-144,"width":32,"height":32,"inputConnectorIDs":[67740],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67719],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 2"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67691":{"id":67691,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":384,"y":48,"width":32,"height":32,"inputConnectorIDs":[67719,67711],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67726],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 2"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67692":{"id":67692,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":544,"y":-48,"width":32,"height":32,"inputConnectorIDs":[67726],"outputSuccessConnectorIDs":[67709],"outputFailureConnectorIDs":[67742],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Unique leghashkey"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n# Unique leghashkey Record\ncursor = context.cursor()\nsql1 = ''' SELECT COUNT (*) as recordcount FROM (\n SELECT leghashkey, carriercode,flightnumber,flightdate,departurestation,effectivedatetimeutc, count (*) \n FROM public.flightdetailhistory GROUP BY leghashkey, carriercode,flightnumber,flightdate,departurestation,effectivedatetimeutc\n HAVING count (*) > 1 ) t '''\n\ncursor.execute(sql1)\n\ndup_leghashkey_rec = cursor.fetchone()[0]\n\nif dup_leghashkey_rec>0 :\n  message = \"Number of duplicate leghashkey Records are :\"\n  message = message + str(dup_leghashkey_rec) + \"\\n\"\n  message = message + \"Please validate these records\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception      \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67693":{"id":67693,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":688,"y":48,"width":32,"height":32,"inputConnectorIDs":[67709,67727],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67722],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 3"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67694":{"id":67694,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":688,"y":-144,"width":32,"height":32,"inputConnectorIDs":[67742],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67727],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 3"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67695":{"id":67695,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":816,"y":-48,"width":32,"height":32,"inputConnectorIDs":[67722],"outputSuccessConnectorIDs":[67710],"outputFailureConnectorIDs":[67739],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Unique Active Record"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' SELECT COUNT (*) as recordcount FROM (\n SELECT carriercode,flightnumber,flightdate,departurestation,arrivalstation, effectivedatetimeutc, count (*) \n FROM public.flightdetailhistory \n where activeflag='1'\n GROUP BY carriercode,flightnumber,flightdate,departurestation,arrivalstation, effectivedatetimeutc\n HAVING count (*) > 1 ) t '''\n\n\ncursor.execute(sql1)\n\ndup_Active_rec = cursor.fetchone()[0]\n\nif dup_Active_rec > 0:\n  message = \"Number of duplicate Active Records are :\"\n  message = message + str(dup_Active_rec) + \"\\n\"\n  message = message + \"Please validate these records\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception     \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67696":{"id":67696,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":944,"y":-144,"width":32,"height":32,"inputConnectorIDs":[67739],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67721],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 4"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67697":{"id":67697,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":944,"y":48,"width":32,"height":32,"inputConnectorIDs":[67721,67710],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67734],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 4"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67698":{"id":67698,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-464,"y":-48,"width":32,"height":32,"inputConnectorIDs":[67732],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[67716],"outputFalseConnectorIDs":[67717],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If 0"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"null_flag"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67699":{"id":67699,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-96,"y":-64,"width":32,"height":32,"inputConnectorIDs":[67730],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[67715],"outputFalseConnectorIDs":[67718],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If 1"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"default_value_flag"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"0"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67700":{"id":67700,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1344,"y":-48,"width":32,"height":32,"inputConnectorIDs":[67728],"outputSuccessConnectorIDs":[67713],"outputFailureConnectorIDs":[67738],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"missing active flight records"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' select count(*) from (\nSELECT DISTINCT\neventname\n,carriercode\n,flightnumber\n,departuredate\n,departurestation\n,arrivalstation\n,eventdatetimeutc\nFROM public.pnrpassengerhistory AS pph\nWHERE eventname NOT IN ('') AND carriercode = 'PD'\n/* exclude events before the day of departure */\nAND eventdatetimeutc >= departuredate\n/*check if the active record was found in the the fdh table for the time period */\nAND NOT EXISTS (SELECT 1 FROM public.flightdetailhistory AS fdh1\nWHERE pph.carriercode = fdh1.carriercode\nAND pph.flightnumber = fdh1.flightnumber\nAND pph.departuredate = fdh1.flightdate\nAND pph.departurestation = fdh1.departurestation\nAND pph.arrivalstation = fdh1.arrivalstation\nAND fdh1.activeflag = 1\nAND pph.eventdatetimeutc BETWEEN fdh1.effectivedatetimeutc AND fdh1.expireddatetimeutc) ) '''\n\n\ncursor.execute(sql1)\n\nmissing_rec = cursor.fetchone()[0]\n\nif missing_rec > 0:\n  message = \"Number of missing active records in the flight detail history table based on events in the pnr flight history table are : \"\n  message = message + str(missing_rec) + \"\\n\"\n  message = message + \"Please validate these records in public.flightdetailhistory table\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception     \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67701":{"id":67701,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1440,"y":-144,"width":32,"height":32,"inputConnectorIDs":[67738],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67725],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 6"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67702":{"id":67702,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1440,"y":32,"width":32,"height":32,"inputConnectorIDs":[67713,67725],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67736],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"of Or 5"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67703":{"id":67703,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1120,"y":-64,"width":32,"height":32,"inputConnectorIDs":[67734],"outputSuccessConnectorIDs":[67712],"outputFailureConnectorIDs":[67743],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Missing flight detail record"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' select count(*) from (\nSELECT DISTINCT\ncarriercode\n,flightnumber\n,departuredate\n,departurestation\n,arrivalstation\nFROM public.pnrpassengerhistory AS pph\nWHERE eventname NOT IN ('') AND carriercode = 'PD'\n/* exclude events before the day of departure */\nAND eventdatetimeutc >= departuredate\n/*check if the active record was found in the the fdh table for the time period */\nAND NOT EXISTS (SELECT 1 FROM public.flightdetailhistory AS fdh1\nWHERE pph.carriercode = fdh1.carriercode\nAND pph.flightnumber = fdh1.flightnumber\nAND pph.departuredate = fdh1.flightdate\nAND pph.departurestation = fdh1.departurestation\nAND pph.arrivalstation = fdh1.arrivalstation\nAND fdh1.activeflag = 1)) '''\n\n\ncursor.execute(sql1)\n\nmissing_rec = cursor.fetchone()[0]\n\nif missing_rec > 0:\n  message = \"There are \" + str(missing_rec) + \" missing flight records in the flight detail history table based on events in the pnr flight history table.\"\n  message = message + \"\\nThe flight records need to be added to the flighthistorytable. Please validate the public.flightdetailhistory process for issues.\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception     \n\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67704":{"id":67704,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1216,"y":-144,"width":32,"height":32,"inputConnectorIDs":[67743],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67723],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 5"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67705":{"id":67705,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1216,"y":32,"width":32,"height":32,"inputConnectorIDs":[67712,67723],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67728],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or _ 4"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67706":{"id":67706,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1600,"y":-64,"width":32,"height":32,"inputConnectorIDs":[67736],"outputSuccessConnectorIDs":[67714],"outputFailureConnectorIDs":[67741],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Checking for duplicate active records"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' select count(*)\nfrom public.flightdetailhistory as A,\npublic.flightdetailhistory as B\nwhere A.effectivedatetimeutc > B.effectivedatetimeutc and A.effectivedatetimeutc < B.expireddatetimeutc\nand A.flightnumber=B.flightnumber\nand A.flightdate=B.flightdate\nand A.departurestation=B.departurestation\nand A.arrivalstation=B.arrivalstation \nand A.activeflag = B.activeflag'''\n\n\ncursor.execute(sql1)\n\nmissing_rec = cursor.fetchone()[0]\n\nif missing_rec > 0:\n  message = \"Number of duplicate active records in flight detail history table based on flight number, flight date, departure station and arrival station are : \"\n  message = message + str(missing_rec) + \"\\n\"\n  message = message + \"Please validate these records in public.flightdetailhistory table\"\n  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception     \n\n\n \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67707":{"id":67707,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1712,"y":0,"width":32,"height":32,"inputConnectorIDs":[67714,67720],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67735],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 7"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"67708":{"id":67708,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1712,"y":-144,"width":32,"height":32,"inputConnectorIDs":[67741],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[67720],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW message 7"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"67713":{"id":67713,"sourceID":67700,"targetID":67702},"67712":{"id":67712,"sourceID":67703,"targetID":67705},"67714":{"id":67714,"sourceID":67706,"targetID":67707},"67709":{"id":67709,"sourceID":67692,"targetID":67693},"67711":{"id":67711,"sourceID":67689,"targetID":67691},"67710":{"id":67710,"sourceID":67695,"targetID":67697}},"failureConnectors":{"67739":{"id":67739,"sourceID":67695,"targetID":67696},"67738":{"id":67738,"sourceID":67700,"targetID":67701},"67741":{"id":67741,"sourceID":67706,"targetID":67708},"67740":{"id":67740,"sourceID":67689,"targetID":67690},"67743":{"id":67743,"sourceID":67703,"targetID":67704},"67742":{"id":67742,"sourceID":67692,"targetID":67694}},"unconditionalConnectors":{"67719":{"id":67719,"sourceID":67690,"targetID":67691},"67721":{"id":67721,"sourceID":67696,"targetID":67697},"67720":{"id":67720,"sourceID":67708,"targetID":67707},"67723":{"id":67723,"sourceID":67704,"targetID":67705},"67722":{"id":67722,"sourceID":67693,"targetID":67695},"67725":{"id":67725,"sourceID":67701,"targetID":67702},"67724":{"id":67724,"sourceID":67683,"targetID":67684},"67727":{"id":67727,"sourceID":67694,"targetID":67693},"67726":{"id":67726,"sourceID":67691,"targetID":67692},"67729":{"id":67729,"sourceID":67688,"targetID":67689},"67728":{"id":67728,"sourceID":67705,"targetID":67700},"67731":{"id":67731,"sourceID":67684,"targetID":67686},"67730":{"id":67730,"sourceID":67686,"targetID":67699},"67733":{"id":67733,"sourceID":67681,"targetID":67682},"67732":{"id":67732,"sourceID":67682,"targetID":67698},"67735":{"id":67735,"sourceID":67707,"targetID":67685},"67734":{"id":67734,"sourceID":67697,"targetID":67703},"67737":{"id":67737,"sourceID":67687,"targetID":67688},"67736":{"id":67736,"sourceID":67702,"targetID":67706}},"trueConnectors":{"67715":{"id":67715,"sourceID":67699,"targetID":67688},"67716":{"id":67716,"sourceID":67698,"targetID":67684}},"falseConnectors":{"67717":{"id":67717,"sourceID":67698,"targetID":67683},"67718":{"id":67718,"sourceID":67699,"targetID":67687}},"iterationConnectors":{},"noteConnectors":{},"canUndo":true,"undoCommand":"Set Parameter","undoCreated":1579100712400,"canRedo":false,"redoCommand":"","redoCreated":-1,"notes":{"67672":{"id":67672,"x":-583,"y":-362,"width":542,"height":59,"text":"**DI check Flight Details History**\n\nLast updated: 2020-01-14","colour":"e6e63c"},"67673":{"id":67673,"x":-585,"y":-221,"width":308,"height":321,"text":"QA #1: script to check for NULL values.","colour":"e6e63c"},"67674":{"id":67674,"x":-221,"y":-208,"width":299,"height":312,"text":"Validate all the schedule time columns have valid date and time values. Default datetimes are not validate.","colour":"e6e63c"},"67675":{"id":67675,"x":156,"y":-215,"width":273,"height":314,"text":"Check the latest datetime in the table to make sure it is not older than 6 hours","colour":"e6e63c"},"67676":{"id":67676,"x":483,"y":-210,"width":241,"height":308,"text":"A unique record in the table is leghashkey, carriercode,flightnumber,flightdate,departurestation,effectivedatetimeutc","colour":"e6e63c"},"67677":{"id":67677,"x":755,"y":-203,"width":249,"height":299,"text":"A unique active record in the table ","colour":"e6e63c"},"67678":{"id":67678,"x":1299,"y":-202,"width":240,"height":297,"text":"Identify missing active records in flight detail history table.","colour":"e6e63c"},"67679":{"id":67679,"x":1034,"y":-203,"width":240,"height":297,"text":"Identify missing flight records in flight detail history table.","colour":"e6e63c"},"67680":{"id":67680,"x":1568,"y":-201,"width":240,"height":297,"text":"Identify duplicate active records in flight detail history table with respect to flight number, flight date, departure station and arrival station.","colour":"e6e63c"}},"variables":{"default_value_flag":{"definition":{"name":"default_value_flag","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"null_flag":{"definition":{"name":"null_flag","type":"DECIMAL","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":null}},"grids":{}},"info":{"name":"DI - Flight Detail History Data Checks","description":"validates the quality and integrity of the fdh table","type":"ORCHESTRATION"}}