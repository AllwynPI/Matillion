{"job":{"components":{"13035":{"id":13035,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-544,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[13052],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13049":{"id":13049,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-352,"y":48,"width":32,"height":32,"inputConnectorIDs":[13052],"outputSuccessConnectorIDs":[13082],"outputFailureConnectorIDs":[13090],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check Events"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n#to apply the variables. take the startdate and enddate values and copy them into the query (row 26 sql)\nstartdate = '2019-06-20'  \nenddate = '2019-06-21'\n\nprint (str(startdate))\nprint (str(enddate))\n\n\ncursor = context.cursor()\n\nsql = \"WITH tmp_variables AS (SELECT   '2019-06-20'::DATE AS startdate,    '2019-06-21'::DATE AS enddate  ) \"\nsql = sql  + \"select count (*) from ( \"\nsql = sql  + \" SELECT t3.pnr, t3.passengerid, t3.journeynumber, t3.segmentnumber, t3.legnumber, SUM (t3.recordcount) FROM ( \"\nsql = sql  + \" SELECT t2.pnr, t2.passengerid, t2.segmentid, t2.journeynumber, t2.segmentnumber, t2.legnumber, t2.eventname, count (*) recordcount \"\nsql = sql  + \" FROM (SELECT pnr, passengerid, segmentid, eventdatetimeutc, max(journeynumber) maxjourney, max(segmentnumber) maxsegment, max (legnumber) maxleg \"\nsql = sql  + \" FROM public.pnrpassengerhistory WHERE eventname in ('BOARDED') AND eventdatetimeutc >= (SELECT startdate FROM tmp_variables) AND eventdatetimeutc < (SELECT enddate FROM tmp_variables) \"\nsql = sql  + \" GROUP BY pnr, passengerid, segmentid, eventdatetimeutc) t1 \"\nsql = sql  + \" INNER JOIN public.pnrpassengerhistory t2 ON t1.pnr=t2.pnr AND t1.passengerid=t2.passengerid AND t1.maxjourney=t2.journeynumber AND t1.maxsegment=t2.segmentnumber AND t1.maxleg=t2.legnumber \"\nsql = sql  + \" WHERE t2.eventname in ('BOOKED', 'CHECKEDIN', 'BOARDED') \"\nsql = sql  + \" GROUP BY t2.pnr, t2.passengerid, t2.segmentid, t2.journeynumber, t2.segmentnumber, t2.legnumber, t2.eventname ) t3 \"\nsql = sql  + \" GROUP BY t3.pnr, t3.passengerid, t3.journeynumber, t3.segmentnumber, t3.legnumber \"\nsql = sql  + \" HAVING SUM (t3.recordcount) <3 ) t4 \"\n\n\ncursor.execute(sql)\nrow = cursor.fetchone()\n\nif row:\n  missingevents = row[0]\n  print (\"Number of missing events - book, checkin, boarded: \" + str(missingevents))\n  \n  \nif missingevents > 0:\n  \n  message = \"\\nThere are missing booked, checkin or boarded events in the PNR History table: \\n\"\n  message = message + \"Between  \" + str(startdate) +\" and \"  + str(enddate) + \" there are \"  + str(missingevents) + \" missing PNR events. \\n\"\n  message = message + \"Please check the PNR History ETL process. \"\n\n  \n  context.updateVariable(\"Errormessage\", message)\n  print message\n  raise Exception      "}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13057":{"id":13057,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-80,"y":48,"width":32,"height":32,"inputConnectorIDs":[13085],"outputSuccessConnectorIDs":[13143],"outputFailureConnectorIDs":[13146],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check EventType"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\ncursor = context.cursor()\nsql1 = \"SELECT COUNT(*) AS recordcount FROM public.pnrpassengerhistory \"\ncursor.execute(sql1)\nrow1 = cursor.fetchone()\n\n\ntotalpnrphevents = 0\n\nif row1:\n  totalpnrphevents = row1[0]\n\n\nprint (str(totalpnrphevents))\n\n\ncursor = context.cursor()\nsql2 = \"SELECT COUNT(*) AS recordcount FROM stage.passengerflightevent \"\ncursor.execute(sql2)\nrow2 = cursor.fetchone()\n\n\nstagingevents = 0\n\nif row2:\n  stagingevents = row2[0]\n\n\nprint (str(stagingevents))\n\ndifference = totalpnrphevents - stagingevents\n\nprint (str(difference))\n\nif totalpnrphevents <> stagingevents:\n  \n  message = \"\\nThere is a difference in the number of events in the public.pnrpassengerhistory compared to the stage.passengerflightevent table. \\n\"\n  message = message + \"There are \" + str(totalpnrphevents) +\" PNR passenger history events. \\n\"\n  message = message + \"There are \" + str(stagingevents) +\" staging events. \\n\"\n  message = message + \"The difference is \" + str(difference) +\" records. \\n\"\n  message = message + \"Please check the PNR History ETL process. \"\n  \n  context.updateVariable(\"Errormessage\", message)\n  print message\n  raise Exception      \n\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13063":{"id":13063,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":208,"y":48,"width":32,"height":32,"inputConnectorIDs":[13158],"outputSuccessConnectorIDs":[13193],"outputFailureConnectorIDs":[13196],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check Unknown"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n\n#Unknown check\ncursor = context.cursor()\nsql = \"select sum(recordcount) unknwnevents from ( \"\nsql = sql  + \" select cast (t.eventdatetimeest as date) eventdate, t.eventname, count (t.pnr) recordcount from ( \"\nsql = sql  + \" SELECT pnr, passengerid, eventdatetimeutc, CASE WHEN (\teventdatetimeutc between ('2019-03-10 02:00') and ('2019-11-04 02:00') OR \"\nsql = sql  + \" eventdatetimeutc between ('2020-03-08 02:00') and ('2020-11-01 02:00') ) THEN DATEADD(HOUR,-4,eventdatetimeutc)\t\tELSE DATEADD(HOUR,-5,eventdatetimeutc) END eventdatetimeest \"\nsql = sql  + \" , eventname, count (*) FROM public.pnrpassengerhistory AS pph WHERE (eventname IS NULL or eventname in ('UNKNOWN PAX EVENT')) \"\nsql = sql  + \" AND pnr IS NOT NULL GROUP BY 1,2,3,4,5 HAVING  count (*) > 0 ORDER BY 3 desc) t \"\nsql = sql  + \" group by cast (t.eventdatetimeest as date), t.eventname order by 1 )tt \"\n\ncursor.execute(sql)\nrow = cursor.fetchone()\n\nif row:\n  unknownevents = row[0]\n  print (\"Number of missing or unknown events: \" + str(unknownevents))\n\nif unknownevents > 0:\n  \n  message = \"There are \" + str(unknownevents) + \" missing or unknown events in the public.pnrpassengerhistory table. \\n\"\n  message = message + \"Please check the PNR History ETL process. \"\n  context.updateVariable(\"Errormessage\", message)\n  print message\n\n  raise Exception\n  \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13069":{"id":13069,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":512,"y":48,"width":32,"height":32,"inputConnectorIDs":[13206],"outputSuccessConnectorIDs":[13239],"outputFailureConnectorIDs":[13222],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check NULL"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = \"SELECT count (*) FROM public.pnrpassengerhistory WHERE eventname is NULL \"\ncursor.execute(sql1)\nrow1 = cursor.fetchone()\n\nif row1:\n  eventnamenulls = row1[0]\n  print (\"Number of null eventnames: \" + str(eventnamenulls))\n  \n#NULL check eventuser\ncursor = context.cursor()\nsql2 = \"SELECT count (*) FROM public.pnrpassengerhistory WHERE eventuser is NULL \"\ncursor.execute(sql2)\nrow2 = cursor.fetchone()\n\nif row2:\n  eventusernulls = row2[0]\n  print (\"Number of null eventusers: \" +str(eventusernulls))\n    \n#null check eventlocation \ncursor = context.cursor()\nsql3 = \"SELECT count (*) FROM public.pnrpassengerhistory WHERE eventlocation is NULL \"\ncursor.execute(sql3)\nrow3 = cursor.fetchone()\n\nif row3:\n  eventlocationnulls = row3[0]\n  print (\"Number of null eventlocations: \" + str(eventlocationnulls))\n  \n  \n#NULL check std\ncursor = context.cursor()\nsql4 = \"SELECT count (*) FROM public.pnrpassengerhistory WHERE std is NULL \"\ncursor.execute(sql4)\nrow4 = cursor.fetchone()\n\nif row4:\n  stdnulls = row4[0]\n  print (\"Number of null std: \" +str(stdnulls))\n    \n#null check sta \ncursor = context.cursor()\nsql5 = \"SELECT count (*) FROM public.pnrpassengerhistory WHERE sta is NULL \"\ncursor.execute(sql5)\nrow5 = cursor.fetchone()\n\nif row5:\n  stanulls = row5[0]\n  print (\"Number of null sta: \" + str(stanulls))\n  \n#NULL check outtime\ncursor = context.cursor()\nsql6 = \"SELECT count (*) FROM public.pnrpassengerhistory WHERE outtime is NULL \"\ncursor.execute(sql6)\nrow6 = cursor.fetchone()\n\nif row6:\n  outtimenulls = row6[0]\n  print (\"Number of null outtimes: \" + str(outtimenulls))\n  \n#NULL check offtime\ncursor = context.cursor()\nsql7 = \"SELECT count (*) FROM public.pnrpassengerhistory WHERE offtime is NULL \"\ncursor.execute(sql7)\nrow7 = cursor.fetchone()\n\nif row7:\n  offtimenulls = row7[0]\n  print (\"Number of null offtimes: \" +str(offtimenulls))\n    \n#null check ontime\ncursor = context.cursor()\nsql8 = \"SELECT count (*) FROM public.pnrpassengerhistory WHERE ontime is NULL \"\ncursor.execute(sql8)\nrow8 = cursor.fetchone()\n\nif row8:\n  ontimenulls = row8[0]\n  print (\"Number of null ontimes: \" + str(ontimenulls))\n  \n  \n#NULL check std\ncursor = context.cursor()\nsql9 = \"SELECT count (*) FROM public.pnrpassengerhistory WHERE intime is NULL \"\ncursor.execute(sql9)\nrow9 = cursor.fetchone()\n\nif row9:\n  intimenulls = row9[0]\n  print (\"Number of null intimes: \" +str(intimenulls))\n  \n  \nif (eventnamenulls > 0) or (eventusernulls > 0) or (eventlocationnulls > 0) or (stdnulls > 0) or (stanulls > 0) or (intimenulls > 0) or (ontimenulls > 0) or (offtimenulls > 0) or (outtimenulls > 0):\n\n  message = \"\\nNull check results: \\n\"\n  message = message + \"Number of null eventnames: \" + str(eventnamenulls) +\"\\n\"\n  message = message + \"Number of null eventusers: \" + str(eventusernulls) +\"\\n\"\n  message = message + \"Number of null eventlocations: \" + str(eventlocationnulls) +\"\\n\"\n  message = message + \"Number of null std: \" + str(stdnulls) +\"\\n\"\n  message = message + \"Number of null sta: \" + str(stanulls) +\"\\n\"\n  message = message + \"Number of null outtimes: \" + str(outtimenulls) +\"\\n\"\n  message = message + \"Number of null offtimes: \" + str(offtimenulls) +\"\\n\"\n  message = message + \"Number of null ontimes: \" + str(ontimenulls) +\"\\n\"\n  message = message + \"Number of null intimes: \" +str(intimenulls) +\"\\n\"\n  message = message + \"There are null records in public.pnrpassengerhistory table. Please check the PNR History ETL process. \"\n  \n  context.updateVariable(\"Errormessage\", message)\n  print message\n  raise Exception    \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13079":{"id":13079,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":816,"y":0,"width":32,"height":32,"inputConnectorIDs":[13246],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13081":{"id":13081,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-241,"y":-3,"width":32,"height":32,"inputConnectorIDs":[15126,13082],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[13085],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13087":{"id":13087,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":-349,"y":-63,"width":32,"height":32,"inputConnectorIDs":[13090],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[15126],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 0"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-west-2"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AWS Notification Message"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13119":{"id":13119,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":-80,"y":-64,"width":32,"height":32,"inputConnectorIDs":[13146],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[15130],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 1"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-west-2"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AWS Notification Message"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13132":{"id":13132,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":48,"y":0,"width":32,"height":32,"inputConnectorIDs":[13143,15130],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[13158],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13166":{"id":13166,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":208,"y":-64,"width":32,"height":32,"inputConnectorIDs":[13196],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[15135],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 2"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-west-2"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AWS Notification Message"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13182":{"id":13182,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":336,"y":0,"width":32,"height":32,"inputConnectorIDs":[13193,15135],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[13206],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 2"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13211":{"id":13211,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":512,"y":-64,"width":32,"height":32,"inputConnectorIDs":[13222],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[15140],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 3"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-west-2"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AWS Notification Message"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"13230":{"id":13230,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":656,"y":0,"width":32,"height":32,"inputConnectorIDs":[15140,13239],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[13246],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 3"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"13143":{"id":13143,"sourceID":13057,"targetID":13132},"13239":{"id":13239,"sourceID":13069,"targetID":13230},"13193":{"id":13193,"sourceID":13063,"targetID":13182},"13082":{"id":13082,"sourceID":13049,"targetID":13081}},"failureConnectors":{"13090":{"id":13090,"sourceID":13049,"targetID":13087},"13222":{"id":13222,"sourceID":13069,"targetID":13211},"13146":{"id":13146,"sourceID":13057,"targetID":13119},"13196":{"id":13196,"sourceID":13063,"targetID":13166}},"unconditionalConnectors":{"15140":{"id":15140,"sourceID":13211,"targetID":13230},"13158":{"id":13158,"sourceID":13132,"targetID":13063},"13206":{"id":13206,"sourceID":13182,"targetID":13069},"15126":{"id":15126,"sourceID":13087,"targetID":13081},"15130":{"id":15130,"sourceID":13119,"targetID":13132},"13052":{"id":13052,"sourceID":13035,"targetID":13049},"13085":{"id":13085,"sourceID":13081,"targetID":13057},"13246":{"id":13246,"sourceID":13230,"targetID":13079},"15135":{"id":15135,"sourceID":13166,"targetID":13182}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"canUndo":true,"undoCommand":"Set Parameter","undoCreated":1568305472549,"canRedo":false,"redoCommand":"","redoCreated":-1,"notes":{"13042":{"id":13042,"x":-458,"y":-139,"width":258,"height":267,"text":"QA #1: script to check events are captured for PNR, passenger","colour":"e6e63c"},"13107":{"id":13107,"x":-152,"y":-143,"width":258,"height":267,"text":"QA #2: script to check each type of event in the table and the information of the event is accurate","colour":"e6e63c"},"13160":{"id":13160,"x":-584,"y":-257,"width":250,"height":58,"text":"DI check PNR Passenger History\n\nLast updated: 2019-09-05","colour":"e6e63c"},"13172":{"id":13172,"x":149,"y":-140,"width":258,"height":267,"text":"QA #3: script to check for unknown, missing pnrpassengerhistory events","colour":"e6e63c"},"13253":{"id":13253,"x":457,"y":-139,"width":258,"height":267,"text":"QA #4: script for general column review for NULL values","colour":"e6e63c"}},"variables":{},"grids":{}},"info":{"name":"DI - PNR Passenger History","description":"Data integrity check for PNR Passenger History","type":"ORCHESTRATION"}}