{"job":{"components":{"63509":{"id":63509,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-736,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63567],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63510":{"id":63510,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-512,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63567],"outputSuccessConnectorIDs":[63547],"outputFailureConnectorIDs":[63581],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"check missing events"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# DI Check script\n###\n\n#to apply the variables. take the startdate and enddate values and copy them into the query (row 26 sql)\n#startdate = '2019-06-20'  \n#enddate = '2019-06-21'\n#print (str(startdate))\n#print (str(enddate))\n\n\ncursor = context.cursor()\n\nsql =  \"select count (*) from ( \"\nsql = sql  + \" SELECT t3.pnr, t3.passengerid, t3.journeynumber, t3.segmentnumber, t3.legnumber, SUM (t3.recordcount) FROM ( \"\nsql = sql  + \" SELECT t2.pnr, t2.passengerid, t2.segmentid, t2.journeynumber, t2.segmentnumber, t2.legnumber, t2.eventname, count (*) recordcount \"\nsql = sql  + \" FROM (SELECT pnr, passengerid, segmentid, eventdatetimeutc, max(journeynumber) maxjourney, max(segmentnumber) maxsegment, max (legnumber) maxleg \"\nsql = sql  + \" FROM public.pnrpassengerhistory WHERE eventname in ('BOARDED')\"\nsql = sql  + \" GROUP BY pnr, passengerid, segmentid, eventdatetimeutc) t1 \"\nsql = sql  + \" INNER JOIN public.pnrpassengerhistory t2 ON t1.pnr=t2.pnr AND t1.passengerid=t2.passengerid AND t1.maxjourney=t2.journeynumber AND t1.maxsegment=t2.segmentnumber AND t1.maxleg=t2.legnumber \"\nsql = sql  + \" WHERE t2.eventname in ('BOOKED', 'CHECKEDIN', 'BOARDED') \"\nsql = sql  + \" GROUP BY t2.pnr, t2.passengerid, t2.segmentid, t2.journeynumber, t2.segmentnumber, t2.legnumber, t2.eventname ) t3 \"\nsql = sql  + \" GROUP BY t3.pnr, t3.passengerid, t3.journeynumber, t3.segmentnumber, t3.legnumber \"\nsql = sql  + \" HAVING SUM (t3.recordcount) <3 ) t4 \"\n\n\ncursor.execute(sql)\nrow = cursor.fetchone()\n\nif row:\n  missingevents = row[0]\n  print (\"Number of missing events - book, checkin, boarded: \" + str(missingevents))\n  \n  \nif missingevents > 0:\n  \n  message = \"\\nThere are missing booked, checkin or boarded events in the PNR History table: \\n\"\n  message = message + \"There are \"  + str(missingevents) + \" missing PNR events. \\n\"\n  message = message + \"Please check the PNR History ETL process. \"\n\n  \n  context.updateVariable(\"Errormessage\", message)\n  print message\n  raise Exception      "}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63511":{"id":63511,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-176,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63558],"outputSuccessConnectorIDs":[63545],"outputFailureConnectorIDs":[63577],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Stage-public difference"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\ncursor = context.cursor()\nsql1 = \"SELECT COUNT(*) AS recordcount FROM public.pnrpassengerhistory \"\ncursor.execute(sql1)\nrow1 = cursor.fetchone()\n\n\ntotalpnrphevents = 0\n\nif row1:\n  totalpnrphevents = row1[0]\n\n\nprint (str(totalpnrphevents))\n\n\ncursor = context.cursor()\nsql2 = \"SELECT COUNT(*) AS recordcount FROM stage.passengerflightevent \"\ncursor.execute(sql2)\nrow2 = cursor.fetchone()\n\n\nstagingevents = 0\n\nif row2:\n  stagingevents = row2[0]\n\n\nprint (str(stagingevents))\n\ndifference = stagingevents - totalpnrphevents\n\nprint (str(difference))\n\nif totalpnrphevents <> stagingevents:\n  \n  message = \"\\nThere is a difference in the number of events in the public.pnrpassengerhistory compared to the stage.passengerflightevent table. \\n\"\n  message = message + \" -There are \" + str(stagingevents) +\" stage.passengerflightevent \\n\"\n  message = message + \" -There are \" + str(totalpnrphevents) +\" public.pnrpassengerhistory table. \\n\"\n  message = message + \" -The difference of (stage - public) is \" + str(difference) +\" records. \\n\"\n  message = message + \" Please check the PNR History ETL process. \"\n  \n  context.updateVariable(\"Errormessage\", message)\n  print message\n  raise Exception      \n\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63512":{"id":63512,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":144,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63556],"outputSuccessConnectorIDs":[63549],"outputFailureConnectorIDs":[63580],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check unknown"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n\n\n#Unknown check\ncursor = context.cursor()\nsql = \"SELECT COUNT(*) AS recordcount FROM public.pnrpassengerhistory WHERE (eventname IN ('UNKNOWN EVENT TYPE','UNKNOWN PAX EVENT') OR eventname IS NULL) \"\n\ncursor.execute(sql)\nrow = cursor.fetchone()\n\nif row:\n  unknownevents = row[0]\n  print (\"Number of null or unknown events: \" + str(unknownevents))\n\nif unknownevents > 0:\n  \n  message = \"There are \" + str(unknownevents) + \" NULL or UNKNOWN events in the public.pnrpassengerhistory table. \\n\"\n  message = message + \"Please check the PNR History ETL process. \"\n  context.updateVariable(\"Errormessage\", message)\n  print message\n\n  raise Exception\n  \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63513":{"id":63513,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":480,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63551],"outputSuccessConnectorIDs":[63550],"outputFailureConnectorIDs":[63579],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Check NULL and Default values"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# check for null values or default values for the priority fields in the table\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' select columnname, recount from (\nSELECT 'Departures after Jun 1 2019, eventuser' AS columnname, count (*)recount FROM public.pnrpassengerhistory WHERE eventuser is NULL AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, eventlocation' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE eventlocation is NULL AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, intime' AS columnname, COUNT(*) reccount FROM public.pnrpassengerhistory WHERE eventname='FLIGHT ARRIVAL' and intime is NULL and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, stdutc' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(stdutc,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, std' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(std,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, stautc' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(stautc,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, sta' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(sta,'1900-01-01') = '1900-01-01'  and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, eta' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(eta,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, etd' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(etd,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, etautc' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(etautc,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, journeysta' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(journeysta,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, etdutc' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(etdutc,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, standbyflag' AS columnname, count(*) from public.pnrpassengerhistory where standbyflag is null AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, PNR' AS columnname, count(*) from public.pnrpassengerhistory where pnr is null AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Departures after Jun 1 2019, productclasscode' AS columnname, count(*) from public.pnrpassengerhistory where productclasscode is null  AND departuredate >= '2019-06-01 00:00:00'\n\nUNION SELECT 'Departures before Jun 1 2019, eventuser' AS columnname, count (*)recount FROM public.pnrpassengerhistory WHERE eventuser is NULL AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, eventlocation' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE eventlocation is NULL AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, intime' AS columnname, COUNT(*) reccount FROM public.pnrpassengerhistory WHERE eventname='FLIGHT ARRIVAL' and intime is NULL and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, stdutc' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(stdutc,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, std' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(std,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, stautc' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(stautc,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, sta' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(sta,'1900-01-01') = '1900-01-01'  and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, eta' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(eta,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, etd' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(etd,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, etautc' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(etautc,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, journeysta' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(journeysta,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, etdutc' AS columnname, COUNT(*) recount FROM public.pnrpassengerhistory WHERE ISNULL(etdutc,'1900-01-01') = '1900-01-01' and carriercode='PD' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, standbyflag' AS columnname, count(*) from public.pnrpassengerhistory where standbyflag is null AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, PNR' AS columnname, count(*) from public.pnrpassengerhistory where pnr is null AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Departures before Jun 1 2019, productclasscode' AS columnname, count(*) from public.pnrpassengerhistory where productclasscode is null AND departuredate < '2019-06-01 00:00:00' )\norder by columnname '''\n\n\ncursor.execute(sql1)\nresult = cursor.fetchall()\nif len(result)>0:\n  chunks = [\"\\nNull check results: \\n\"]\n  for r in result:\n    if r[1]>0:\n      chunks.append(\"Number of null or missing values(default 1900-01-01 or '') \"+ str(r[0])+ \" : \" +str(r[1]) +\"\\n\")\n  message = ''.join(chunks)  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception    \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63514":{"id":63514,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":-512,"y":-208,"width":32,"height":32,"inputConnectorIDs":[63581],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63569],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 0"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63515":{"id":63515,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":-176,"y":-224,"width":32,"height":32,"inputConnectorIDs":[63577],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63552],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 1"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63516":{"id":63516,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":144,"y":-224,"width":32,"height":32,"inputConnectorIDs":[63580],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63555],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 2"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63517":{"id":63517,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":480,"y":-224,"width":32,"height":32,"inputConnectorIDs":[63579],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63557],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 3"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63518":{"id":63518,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-384,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63569,63547],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63558],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63519":{"id":63519,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-32,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63552,63545],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63556],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63520":{"id":63520,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":288,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63555,63549],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63551],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 2"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63521":{"id":63521,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":608,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63557,63550],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63554],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 3"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63522":{"id":63522,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":768,"y":-48,"width":32,"height":32,"inputConnectorIDs":[63554],"outputSuccessConnectorIDs":[63544],"outputFailureConnectorIDs":[63578],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"duplicate events in pnr history records"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# DI Check script\n###\n\ncursor = context.cursor()\n\nsql = ''' SELECT createdttm, eventname, COUNT(*) FROM (\nSELECT PNR, passengerid, flightnumber, departuredate, departurestation,arrivalstation, eventdatetimeutc,segmentid,createdttm, eventname,journeynumber,segmentnumber,legnumber, COUNT(*) \nFROM public.pnrpassengerhistory\nWHERE eventname IN ('BOARDED','CHECKEDIN','FLIGHT ADDED','BOARDED STANDBY','FLIGHT ADDED STANDBY','NOSHOW','FLIGHT ARRIVAL','FLIGHT CANCEL', 'FLIGHT ETA CHANGE','FLIGHT ETD CHANGE','FLIGHT ETD/ETA CHANGE') \nGROUP BY PNR, passengerid, flightnumber, departuredate, departurestation,arrivalstation, eventname,eventdatetimeutc,createdttm,segmentid,journeynumber,segmentnumber,legnumber\nHAVING COUNT(*) > 1)\nGROUP BY createdttm, eventname ORDER BY createdttm, eventname '''\n\n\ncursor.execute(sql)\nresult = cursor.fetchall()\nif len(result) > 0:\n  chunks = [\"Duplicate events in public.pnrpassengerhistory : \\n\"]\n  for r in result:\n    if r[2]>0:\n      chunks.append(\" Records were created on: \"+ str(r[0]) + \"  ,   \" + str(r[1]) + \" : \" +str(r[2]) +\"\\n\")\n  message = ''.join(chunks)  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception      \n   "}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63523":{"id":63523,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":768,"y":-224,"width":32,"height":32,"inputConnectorIDs":[63578],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63568],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 4"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63524":{"id":63524,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":896,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63568,63544],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63560],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"or3"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63525":{"id":63525,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1056,"y":-224,"width":32,"height":32,"inputConnectorIDs":[63574],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63559],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 5"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63526":{"id":63526,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1056,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63560],"outputSuccessConnectorIDs":[63546],"outputFailureConnectorIDs":[63574],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"last run time for flight events"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# DI Check script\n###\n\ncursor = context.cursor()\n\nimport datetime\n\ntoday_date = datetime.datetime.now()\n\n#print(today_date)\n\n\nsql = ''' SELECT MAX(eventname) AS eventname, MAX(eventdatetimeutc) AS eventdatetimeutc FROM public.pnrpassengerhistory WHERE eventname = 'FLIGHT ARRIVAL'\nUNION\nSELECT MAX(eventname) AS eventname, MAX(eventdatetimeutc) AS eventdatetimeutc FROM public.pnrpassengerhistory WHERE eventname =  'FLIGHT ETA CHANGE'\nUNION\nSELECT MAX(eventname) AS eventname, MAX(eventdatetimeutc) AS eventdatetimeutc FROM public.pnrpassengerhistory WHERE eventname =  'FLIGHT ETD CHANGE'\nUNION\nSELECT MAX(eventname) AS eventname, MAX(eventdatetimeutc) AS eventdatetimeutc FROM public.pnrpassengerhistory WHERE eventname =  'FLIGHT DROPPED'\nUNION\nSELECT MAX(eventname) AS eventname, MAX(eventdatetimeutc) AS eventdatetimeutc FROM public.pnrpassengerhistory WHERE eventname =  'FLIGHT ETD/ETA CHANGE' \n\n'''\n\ncursor.execute(sql)\nchunks = [\"\\nCheck the last date and time when each flight event was added to the table to confirm new events are added daily.: \\n\"]\nresult = cursor.fetchall()\nfor r in result:\n      dateTimeDifference = (today_date - r[1]).total_seconds()/3600\n      if dateTimeDifference > 24 :\n        chunks.append( str(r[0])+ \" : \" +str(r[1]) +\"\\n\")\nmessage = ''.join(chunks)  \n  \ncontext.updateVariable(\"Errormessage\",message)\nprint (message)\nraise Exception      \n   "}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63527":{"id":63527,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1152,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63559,63546],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63553],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"or4"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63528":{"id":63528,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1360,"y":-224,"width":32,"height":32,"inputConnectorIDs":[63572],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63565],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 6"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63529":{"id":63529,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1360,"y":-80,"width":32,"height":32,"inputConnectorIDs":[63553],"outputSuccessConnectorIDs":[63543],"outputFailureConnectorIDs":[63572],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"undefined eventusers"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# DI Check script\n###\n\ncursor = context.cursor()\n\nsql = ''' SELECT eventuser, recordcount \nFROM (SELECT eventuser, COUNT(*) AS recordcount\nFROM public.pnrpassengerhistory\nGROUP BY eventuser)\nWHERE POSITION('-' IN eventuser) > 0  --identifies any undefined event users\nORDER BY recordcount\n'''\n\ncursor.execute(sql)\nresult = cursor.fetchall()\nif len(result)>0:\n  chunks = [\"\\nUndefined event users in public.pnrpassengerhistory tables : \\n\"]\n  for r in result:\n    if r[1]>0:\n      chunks.append(str(r[0])+ \" : \" +str(r[1]) +\"\\n\")\n  message = ''.join(chunks)  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception      \n   "}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63530":{"id":63530,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1456,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63543,63565],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63562],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"or5"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63531":{"id":63531,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1680,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63562],"outputSuccessConnectorIDs":[63541],"outputFailureConnectorIDs":[63573],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"missing flight arrival oooi times"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n\n###\n\n\n#NULL check eventname\ncursor = context.cursor()\nsql1 = ''' SELECT 'After June 2019, intime' AS record, count(*) recordcount FROM public.pnrpassengerhistory WHERE  eventname = 'FLIGHT ARRIVAL' AND intime = '1900-01-01' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'After June 2019, ontime' AS record, count(*) recordcount FROM public.pnrpassengerhistory WHERE  eventname = 'FLIGHT ARRIVAL' AND ontime = '1900-01-01' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'After June 2019, offtime' AS record, count(*) recordcount FROM public.pnrpassengerhistory WHERE  eventname = 'FLIGHT ARRIVAL' AND offtime = '1900-01-01' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'After June 2019, outtime' AS record, count(*) recordcount FROM public.pnrpassengerhistory WHERE  eventname = 'FLIGHT ARRIVAL' AND outtime = '1900-01-01' AND departuredate >= '2019-06-01 00:00:00'\nUNION SELECT 'Before June 2019, intime' AS record, count(*) recordcount FROM public.pnrpassengerhistory WHERE  eventname = 'FLIGHT ARRIVAL' AND intime = '1900-01-01' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Before June 2019, ontime' AS record, count(*) recordcount FROM public.pnrpassengerhistory WHERE  eventname = 'FLIGHT ARRIVAL' AND ontime = '1900-01-01' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Before June 2019, offtime' AS record, count(*) recordcount FROM public.pnrpassengerhistory WHERE  eventname = 'FLIGHT ARRIVAL' AND offtime = '1900-01-01' AND departuredate < '2019-06-01 00:00:00'\nUNION SELECT 'Before June 2019, outtime' AS record, count(*) recordcount FROM public.pnrpassengerhistory WHERE  eventname = 'FLIGHT ARRIVAL' AND outtime = '1900-01-01' AND departuredate < '2019-06-01 00:00:00'\nORDER BY record'''\n\n\ncursor.execute(sql1)\nresult = cursor.fetchall()\nif len(result)>0:\n  chunks = [\"\\nFlight Arrival events with missing OOOI times. Please check the pnr passenger flight history table: \\n\\n\"]\n  for r in result:\n    if r[1]>0:\n      chunks.append(\"Missing \"+ str(r[0])+ \" values: \" +str(r[1]) +\"\\n\")\n  message = ''.join(chunks)  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception    \n  \n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63532":{"id":63532,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1680,"y":-224,"width":32,"height":32,"inputConnectorIDs":[63573],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63561],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 7"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63533":{"id":63533,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":1776,"y":-144,"width":32,"height":32,"inputConnectorIDs":[63541,63561],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63563],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of or5"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63534":{"id":63534,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":1968,"y":-48,"width":32,"height":32,"inputConnectorIDs":[63563],"outputSuccessConnectorIDs":[63548],"outputFailureConnectorIDs":[63575],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"missing flight arrival events"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"cursor = context.cursor()\nsql1 = '''\n\nSELECT 'departure date ' +  CAST(departuredate AS varchar(10)) AS record ,COUNT(*) AS recordcount FROM (\nSELECT \nDISTINCT feh.eventdatetimeutc, pph.passengerid  ,pph.journeynumber, pph.segmentnumber , pph.legnumber\n\t,pph.flightnumber, pph.departuredate, pph.departurestation, pph.arrivalstation\nFROM public.pnrpassengerhistory AS pph\n\tINNER JOIN public.flighteventhistory AS feh\n\tON pph.flightnumber = feh.flightnumber\n\tAND pph.departuredate = feh.flightdate\n\tAND pph.departurestation = feh.departurestation\n\tAND pph.arrivalstation = feh.arrivalstation\nWHERE pph.eventname = 'BOARDED' AND pph.flownflightflag = 1 AND pph.carriercode = 'PD'\nAND feh.eventname = 'ARRIVAL' AND pph.standbyflag=0 AND pph.pnr IS NOT NULL\nAND NOT EXISTS (SELECT 1 FROM public.pnrpassengerhistory AS pp\nWHERE pp.eventname IN ('UNBOARDED') AND pp.pnr = pph.pnr\nAND pp.passengerid = pph.passengerid AND pp.flightnumber = feh.flightnumber\nAND pp.departuredate = feh.flightdate AND pp.departurestation = feh.departurestation\nAND pp.journeynumber = pph.journeynumber\nAND pp.arrivalstation = feh.arrivalstation AND pp.eventdatetimeutc > pph.eventdatetimeutc ) \n/* check if the event is already in the public table */\nAND NOT EXISTS (SELECT 1 FROM public.pnrpassengerhistory AS pp\nWHERE pp.eventname IN ('FLIGHT ARRIVAL') \nAND pp.pnr = pph.pnr\nAND pp.passengerid = pph.passengerid\nAND pp.flightnumber = pph.flightnumber\nAND pp.journeynumber = pph.journeynumber\nAND pp.departuredate = pph.departuredate\nAND pp.departurestation = pph.departurestation\nAND pp.arrivalstation = pph.arrivalstation\nAND pp.eventdatetimeutc = feh.eventdatetimeutc))\nGROUP BY departuredate'''\n\ncursor.execute(sql1)\nresult = cursor.fetchall()\nif len(result)>0:\n  #chunks = [\"\\n Missing FLIGHT ARRIVAL events in the public.pnrpassengerhistory table: \\n\"]\n  chunks = [\" \"]\n  for r in result:\n    if r[1]>0:\n      chunks.append(\"Missing FLIGHT ARRIVAL events for \"+ str(r[0])+ \": \" +str(r[1]) +\"\\n\")\n  message = ''.join(chunks)  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception  "}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63535":{"id":63535,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":1968,"y":-240,"width":32,"height":32,"inputConnectorIDs":[63575],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63564],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 8"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63536":{"id":63536,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":2064,"y":-160,"width":32,"height":32,"inputConnectorIDs":[63548,63564],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63571],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of or5 (1)"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63537":{"id":63537,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":2480,"y":-160,"width":32,"height":32,"inputConnectorIDs":[63570],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Success 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63538":{"id":63538,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":2224,"y":-64,"width":32,"height":32,"inputConnectorIDs":[63571],"outputSuccessConnectorIDs":[63542],"outputFailureConnectorIDs":[63576],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Component","mapTo":"ErrorComponent"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sta<>eta"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"cursor = context.cursor()\nsql1 = ''' SELECT 'Departures after June 1 2019 with bookings 30 days or less then prior to departure' AS record ,COUNT(DISTINCT pnr) recordcount FROM (\nselect DISTINCT pnr, passengerid\nfrom public.pnrpassengerhistory pph\nWHERE eventname in ('BOOKED')\nand sta <> eta\nAND datediff(day, eventdatetimeutc, stdutc) <= 30\nand departuredate >= '2019-06-01')\nUNION\nSELECT 'Departures after June 1 2019 with bookings more than 30 days prior to departure' AS record ,COUNT(DISTINCT pnr) recordcount FROM (\nselect DISTINCT pnr, passengerid\nfrom public.pnrpassengerhistory pph\nWHERE eventname in ('BOOKED')\nand sta <> eta\nAND datediff(day, eventdatetimeutc, stdutc) > 30\nand departuredate >= '2019-06-01')\nUNION\nSELECT 'Departures before June 1 2019 with bookings more than 30 days prior to departure' AS record ,COUNT(DISTINCT pnr) recordcount FROM (\nselect DISTINCT pnr, passengerid\nfrom public.pnrpassengerhistory pph\nWHERE eventname in ('BOOKED')\nand sta <> eta\nAND datediff(day, eventdatetimeutc, stdutc) > 30\nand departuredate < '2019-06-01') \nUNION\nSELECT 'Departures before June 1 2019 with bookings 30 days or less then prior to departure' AS record ,COUNT(DISTINCT pnr) recordcount FROM (\nselect DISTINCT pnr, passengerid\nfrom public.pnrpassengerhistory pph\nWHERE eventname in ('BOOKED')\nand sta <> eta\nAND datediff(day, eventdatetimeutc, stdutc) <= 30\nand departuredate < '2019-06-01')\nORDER BY record'''\n\ncursor.execute(sql1)\nresult = cursor.fetchall()\nif len(result)>0:\n  chunks = [\"The STA <> ETA for BOOKED Events in public.pnrpassengerhistory table: \\n\\n\"]\n  for r in result:\n    if r[1]>0:\n      chunks.append( str(r[0])+ \" : \" +str(r[1]) +\"\\n\")\n  message = ''.join(chunks)  \n  context.updateVariable(\"Errormessage\",message)\n  print (message)\n  raise Exception  "}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63539":{"id":63539,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":2224,"y":-256,"width":32,"height":32,"inputConnectorIDs":[63576],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63566],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SNS Message 9"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-east-1"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DW_ETL"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning - ${job_name}"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Warning:\n${Errormessage}\n\n-------------------------------------------\nJob: ${job_name}\nComponent: ${ErrorComponent}\nEnvironment: ${environment_name}\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"63540":{"id":63540,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":2336,"y":-160,"width":32,"height":32,"inputConnectorIDs":[63542,63566],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[63570],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"or6"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"63541":{"id":63541,"sourceID":63531,"targetID":63533},"63542":{"id":63542,"sourceID":63538,"targetID":63540},"63543":{"id":63543,"sourceID":63529,"targetID":63530},"63544":{"id":63544,"sourceID":63522,"targetID":63524},"63545":{"id":63545,"sourceID":63511,"targetID":63519},"63546":{"id":63546,"sourceID":63526,"targetID":63527},"63547":{"id":63547,"sourceID":63510,"targetID":63518},"63548":{"id":63548,"sourceID":63534,"targetID":63536},"63549":{"id":63549,"sourceID":63512,"targetID":63520},"63550":{"id":63550,"sourceID":63513,"targetID":63521}},"failureConnectors":{"63572":{"id":63572,"sourceID":63529,"targetID":63528},"63573":{"id":63573,"sourceID":63531,"targetID":63532},"63574":{"id":63574,"sourceID":63526,"targetID":63525},"63575":{"id":63575,"sourceID":63534,"targetID":63535},"63576":{"id":63576,"sourceID":63538,"targetID":63539},"63577":{"id":63577,"sourceID":63511,"targetID":63515},"63578":{"id":63578,"sourceID":63522,"targetID":63523},"63579":{"id":63579,"sourceID":63513,"targetID":63517},"63580":{"id":63580,"sourceID":63512,"targetID":63516},"63581":{"id":63581,"sourceID":63510,"targetID":63514}},"unconditionalConnectors":{"63552":{"id":63552,"sourceID":63515,"targetID":63519},"63553":{"id":63553,"sourceID":63527,"targetID":63529},"63554":{"id":63554,"sourceID":63521,"targetID":63522},"63555":{"id":63555,"sourceID":63516,"targetID":63520},"63556":{"id":63556,"sourceID":63519,"targetID":63512},"63557":{"id":63557,"sourceID":63517,"targetID":63521},"63558":{"id":63558,"sourceID":63518,"targetID":63511},"63559":{"id":63559,"sourceID":63525,"targetID":63527},"63560":{"id":63560,"sourceID":63524,"targetID":63526},"63561":{"id":63561,"sourceID":63532,"targetID":63533},"63562":{"id":63562,"sourceID":63530,"targetID":63531},"63563":{"id":63563,"sourceID":63533,"targetID":63534},"63564":{"id":63564,"sourceID":63535,"targetID":63536},"63565":{"id":63565,"sourceID":63528,"targetID":63530},"63566":{"id":63566,"sourceID":63539,"targetID":63540},"63567":{"id":63567,"sourceID":63509,"targetID":63510},"63568":{"id":63568,"sourceID":63523,"targetID":63524},"63569":{"id":63569,"sourceID":63514,"targetID":63518},"63570":{"id":63570,"sourceID":63540,"targetID":63537},"63571":{"id":63571,"sourceID":63536,"targetID":63538},"63551":{"id":63551,"sourceID":63520,"targetID":63513}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"canUndo":false,"undoCommand":"","undoCreated":-1,"canRedo":false,"redoCommand":"","redoCreated":-1,"notes":{"63498":{"id":63498,"x":-615,"y":-294,"width":283,"height":296,"text":"check events are captured for PNR, passenger","colour":"e6e63c"},"63499":{"id":63499,"x":-272,"y":-292,"width":277,"height":295,"text":"Check number of records in staging table and number of records in public table and their difference","colour":"e6e63c"},"63500":{"id":63500,"x":54,"y":-292,"width":285,"height":291,"text":"check for unknown, missing  events","colour":"e6e63c"},"63501":{"id":63501,"x":388,"y":-291,"width":264,"height":289,"text":"general column review for NULL values","colour":"e6e63c"},"63502":{"id":63502,"x":-607,"y":-452,"width":436,"height":63,"text":"DI checks for PNR Flight History\n\nLast updated: 2019-11-22","colour":"e6e63c"},"63503":{"id":63503,"x":677,"y":-293,"width":264,"height":289,"text":"check for duplicate records in the table","colour":"e6e63c"},"63504":{"id":63504,"x":965,"y":-295,"width":264,"height":289,"text":"Check the last date and time when each flight event was added to the table to confirm new events are added daily.","colour":"e6e63c"},"63505":{"id":63505,"x":1263,"y":-298,"width":264,"height":289,"text":"DI check for undefined event users. An undefined event user would be any eventuser value using the locationcode + '-' + agentname concatenation.","colour":"e6e63c"},"63506":{"id":63506,"x":1576,"y":-296,"width":264,"height":289,"text":"check for missing OOOI times for flight arrival events","colour":"e6e63c"},"63507":{"id":63507,"x":1866,"y":-299,"width":237,"height":286,"text":"missing flight arrival flights","colour":"e6e63c"},"63508":{"id":63508,"x":2124,"y":-299,"width":237,"height":286,"text":"sta<>eta for Booked Events","colour":"e6e63c"}},"variables":{},"grids":{}},"info":{"name":"DI - PNR Flight History Data Checks","description":"Data integrity check for PNR Fight History","type":"ORCHESTRATION"}}